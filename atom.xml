<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[臧成威的博客]]></title>
  <link href="http://williamzang.com/atom.xml" rel="self"/>
  <link href="http://williamzang.com/"/>
  <updated>2014-08-26T12:15:59+08:00</updated>
  <id>http://williamzang.com/</id>
  <author>
    <name><![CDATA[臧成威]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[聊一聊RAC]]></title>
    <link href="http://williamzang.com/blog/2014/08/20/talk-about-rac/"/>
    <updated>2014-08-20T11:17:32+08:00</updated>
    <id>http://williamzang.com/blog/2014/08/20/talk-about-rac</id>
    <content type="html"><![CDATA[<p>今天来聊一聊RAC，这个在Github上很火热的开源框架，相信很多关注iOS前沿开发的人都或多或少的知道。</p>

<p>关于RAC的介绍和一些概念，我这里就不再啰嗦了，大家可以看   <a href="http://limboy.me/about.html">limboy</a>的几篇关于RAC的介绍，很不错。</p>

<blockquote><p><a href="http://limboy.me/ios/2013/06/19/frp-reactivecocoa.html">ReactiveCocoa与Functional Reactive Programming</a><br/>
<a href="http://limboy.me/ios/2013/12/27/reactivecocoa-2.html">说说ReactiveCocoa 2</a><br/>
<a href="http://limboy.me/ios/2014/01/05/ios-rest-client-implementation.html">基于AFNetworking2.0和ReactiveCocoa2.1的iOS REST Client</a><br/>
<a href="http://limboy.me/tech/2014/06/06/deep-into-reactivecocoa2.html">ReactiveCocoa2实战</a></p></blockquote>

<p>此外还有Cocoachina的一系列教程<a href="http://www.cocoachina.com/cms/plus/view.php?aid=8905">Reactive Cocoa详解</a></p>

<p>写Blog，在我看来和开发一样，也要讲究重用，引用列位的信息即可，何必黏贴和表达类似的观点。这里我也仅说一下我自己的理解和看法。</p>

<p>相信很多人都尝试过RAC用到一些小的DEMO或者项目中的一个小部分然后就浅尝辄止了。为什么呢？我觉得主要在于，RAC实际推行的一种新的概念大家还没有习惯，那就是函数响应式编程FRP。<a href="https://github.com/staltz">staltz</a>在一个Gist上倒是给了一个比较全面的解释<a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754">The introduction to Reactive Programming you&rsquo;ve been missing</a>，可惜是英文的。</p>

<p>这种FRP的核心就在于数据流，FRP把整个的程序认为是数据流的转换，既不是过程、也不是对象。一个系统先产生信号，转换信号，然后业务和界面再接收和响应信号的变化。所以，这是一个新的概念。如果使用别的概念套用，自然用起来就没那么顺手了。那么我们来看看，这样做的好处是什么呢？</p>

<ul>
<li>统一的流处理模式，使得不同的组件可以很好的结合起来，例如iOS的<code>UserDefault</code>、<code>NSNotificationCenter</code>、<code>KVO</code>这些，在RAC库下面，都是相同的封装，这样就使得上层的业务逻辑实现了<strong>大同</strong>，进而一切的信号转换合并都可以有效的结合在一起。</li>
<li>处理异步，很多时候，我们对于异步再同步是比较头大的。而RAC中，一个信号的终止，是不局限在一个函数中的。这样我们可以把不同线程、不同时期的状态绑到一个信号上，使得使用者达到一种内聚。和这种内聚，在转换和迭代的过程中是很必要的。</li>
<li>统一的错误处理，从古老的C时代的<code>int DoSomeThine(int input1, int *output1)</code>这种以返回值返回错误，到后来<code>SetErrorStatus(int ErrorCode, const char *message)</code>的线程栈内全局报错机制，还有现在try-catch机制，都有一个很要命的问题，就是错误处理，或者是可以被忽略，或者是让开发变得很烦恼。Java的try-catch机制，相信Java的开发者们一定深有感触。而RAC把错误变得简单了，它对于错误的处理，会随着变化一起传递到顶层，既不会忘记，也不用在中间环节中手动传递来传递去。</li>
<li>逻辑的拆分，在FRP中，逻辑变得相对独立，通常是一个模块，根据一定的变化产生一个信号，亦或是一个模块，根据一个传入的信号，产生一定的转换。这就使得，我们可以只返回我们的直接结果，后期的加工和变更是分离的。对于上层模块，也只关注信号的类型，不关注处于那个线程还是何种手法。</li>
</ul>


<p>总而言之，RAC给与我们以数据的变化作为出发点，界面与之响应的一套框架。详细的一些技巧，我会在后续的blog中为大家慢慢介绍。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014-8-18 周一 晴]]></title>
    <link href="http://williamzang.com/blog/2014/08/18/2014-8-18-zhou-yi-qing/"/>
    <updated>2014-08-18T11:28:38+08:00</updated>
    <id>http://williamzang.com/blog/2014/08/18/2014-8-18-zhou-yi-qing</id>
    <content type="html"><![CDATA[<p>今天就提一提升级的问题，仅是个人想法。</p>

<p>国内做app的公司，大都有一个特点，就是iOS的版本支持，都比较全面，支持iOS4以上的应用颇为普遍。广大的开发商认为这样可以让目前所有的用户都可以享用到自己的产品，广大的用户认为这样就可以用自己老的产品既不升级硬件，也不升级软件。其实在我看来，长久下去，是对大家都没有好处的。</p>

<p>大家都对某些东西的升级很感兴趣，而且有不给升级就恼怒的情况。这些升级是什么呢？比如职位的升级，工资的升级，职称的升级，家庭地位的升级。可见升级一直都是一个大家比较喜欢和向往的词儿。但是唯独到了软件的升级，就变成了一种痛苦。我们来听一听：</p>

<blockquote><p>iOS 8要来了，我们又得适配新的分辨率了<br/>
API又变了这么多，不晓得又有多少BUG<br/>
什么？这个应用要iOS7以上才可以装，真是个垃圾应用，老子不鸟它<br/>
大家都用上iOS7了，怎么升级啊，不会呢<br/>
为什么要升级，现在用的不是挺好的么<br/>
苹果开始审核不兼容iPhone5的分辨率就不让通过了</p></blockquote>

<p>其实，就单纯iOS来说，用户升级的软件成本已经越来越低了，OTA升级几乎让绝大多数的小白用户都可以在不明觉厉的情况下体验到新的版本。（<em>当然OTA升级后，系统实际上由于垃圾过多速度会稍稍拖慢</em>），那为什么还有那么多人不升级呢？原因有这几个</p>

<ol>
<li>很多程序都是兼容的，不升级也可以用新的</li>
<li>新的系统有BUG，还是等一等稳定的吧（这一等也许就等到你的设备退休）</li>
<li>喜欢老的界面，不喜欢变化</li>
<li>从来不关注这些，有升级提示也不看</li>
</ol>


<p>我们来一个一个分析一下，首先是兼容的问题。这是头等大事，因为软件可以用，当然不需要升级。试想一下，极端情况，如果所有的软件都是只支持最新版，你的iOS6毛应用都装不上，除了把它卖了，就只好升级了。当然这有点太激进，但是也是一种现象。软件的兼容反而是阻碍大家升级的主要原因。反过来看软件的兼容带来什么其他的麻烦了呢？作为开发者，你会发现这些现象：</p>

<ol>
<li>有新的API和开发方法了，不过这个不支持iOS 4，还是别看了</li>
<li>哦，这个API已经不能用了，那我们加个if(response)-else吧</li>
<li>XCode新版已经不支持编译了？我们得想办法装上旧版</li>
</ol>


<p>对于老的公司来说，有旧的版本的程序倒还好做兼容，只是在老的代码上缝缝补补，又可以穿个几年。但是对于新的公司来说，明明一个新的产品，却套上了旧的衣衫，拖慢了开发效率和执行效率不说，软件的“逼格”似乎也拉低了？什么？开发效率？是的，其实苹果每次发布新版iOS，都从API上做了很大的改进，目的当然不是为了让大家更麻烦，而是让大家更灵活的支持定制和拥有更简单的实现方式。Storyboard、Autolayout、包括最新的Size Classes。无一不是为了开发者而搞出来的，大家之所以那么抵触，实际上是因为浮躁和懒惰。浮躁在不愿意仔细了解，一旦发现问题和难点，就马上批判。懒惰在不想学习和研究新的变化，而懒惰的人更喜欢找借口。</p>

<p>往往见到的就是很多人，揪着新技术的一个小小的缺点，然后把它贬低的一无是处。如果是另外一个开发者因为你的一个bug，把你贬低的一无是处，你非气炸了不可。但是很多人就是这样对待新的API和工具的。一张漂漂亮亮的画作上，滴了墨水，很多人都会关注那瑕疵，遍不会好好看那画作了。其实大家静下心来，好好学习一下新的知识，你会发现，它真的可以帮助你好多。</p>

<p>关于新的系统的bug的问题，和上段刚提到的，是一样的，大家缺少包容，通常会对瑕疵有着格外的在意。大家在生活上或多或少都有着这样的感觉，就是你明明做得很辛苦，但是因为一件小事，被人抓到，然后仿佛你所有的努力都没有了。一份90分的卷纸，很少人在乎你做对了90分的题，掌握了90分的知识，只是看到你做错了10分的题，没有掌握或者马虎了10分的知识点。己所不欲，勿施于人。我们都希望世界可以更公平的对待每一个人，也都希望自己的努力可以得到重视，那么我们就不应该这样对待别人，对待新的，很多人努力的成果，不是批判它的瑕疵，而是体验它带来的便利。</p>

<p>喜欢老的界面这个问题，到是可以理解，萝卜白菜各有所爱，很多人在iOS6升7的时候，都有着不适应，似乎在Win7升8的时候更为强烈。主要还是一个习惯问题，我不觉得喜欢一种风格是值得抨击的。但是为了可以提供更好，更优质的软件，我还是喜欢用新的东西来创造。而且，我觉得，如果新的东西做得好起来，还是会让很多人有所改观，相信现在，很多人也已经接受扁平化的iOS7的风格了。</p>

<p>至于不关注的升级的人，其实很多也不关注软件的，所以开发者为了这个理由不升级，就更没有必要了不是么。</p>

<p>再来说说硬件成本，苹果的软件升级，对于较新的设备，是免费的，这点比微软要好，我们总是可以在不花钱的情况下领略新系统带来的便利。然后这总会在你的设备足够老的时候还回去，一旦你开始喜欢上新的系统，发现你不恩能再升级了，就会敦促你买一个新的设备了。苹果也可以那样长久下去。而苹果的长青，也关乎着千千万万的iOS开发者的腰包。所以，顺应潮流，大家都用新的系统来支持，广大的用户就会踊跃升级，也踊跃换新机，大家的开发也就又简单（因为用新的系统和API，减少兼容的代码）又赚得多了。</p>

<p>总之，面向新的时代，我们越能顺应潮流，就越快乐。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014-8-15 周五 多云]]></title>
    <link href="http://williamzang.com/blog/2014/08/15/2014-8-15-zhou-wu-duo-yun/"/>
    <updated>2014-08-15T10:53:40+08:00</updated>
    <id>http://williamzang.com/blog/2014/08/15/2014-8-15-zhou-wu-duo-yun</id>
    <content type="html"><![CDATA[<p>巧用Objc的动态特性，会使你的工作变得有趣并且减少很多未来的工作量。以前也在论坛里提及过Objc的一些动态特性，当时就有很多朋友讲到，单纯知道这些特性，但是不知道如何应用。那么，今天就把我可以想到的几个小例子分享一下。</p>

<p>很多时候，你的代码会变得极其相似。但是又有略微不同，这时你就会想，如果我可以把不同的部分分离出来该多好，但是往往事与愿违。你仍会发现很多的透传代码挡在你的面前，就算不停的优化，接口还是要一个一个导过去。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 类OrdersViewModel</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">hasOrder</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">internalOrderManager</span><span class="p">.</span><span class="n">hasOrder</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">orderCount</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">internalOrderManager</span><span class="p">.</span><span class="n">orderCount</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">orderNameForIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="n">internalOrderManager</span> <span class="n">orderNameForIndex</span><span class="o">:</span><span class="n">index</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 以下略很多的透传</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的封装很好的接口，却因为很多的透传让代码变得臃肿不堪。还存在一些后续维护的问题，当internalOrderManager的接口变化的时候，还需要记得把外面OrdersViewModel这个类也一起变了。</p>

<p>这时就是动态特性大显身手的时候了，如果我们不实现这些方法，运行时会调用一系列的方法来寻求解决方案，这个例子里，最简单的方法就是<code>- (id)forwardingTargetForSelector:(SEL)aSelector</code>，也被称为快速转发，下面是实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 类OrdersViewModel</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">forwardingTargetForSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">aSelector</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">internalOrderManager</span> <span class="n">respondsToSelector</span><span class="o">:</span><span class="n">aSelector</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">internalOrderManager</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>这只是本人的一个日记而已，所以相关技术点请大家去Google一下吧。</em></p>

<p>这么做之后，发现了一个小问题，就是类OrdersViewModel由于没有实现<code>hasOrder</code>,<code>orderCount</code>和<code>orderNameForIndex:</code>这三个方法所以有了Warning。消除的方法就是使用类别</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">OrdersViewModel</span><span class="nl">(Extended)</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">hasOrder</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">orderCount</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">orderNameForIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就好了。</p>

<p>然而很多时候，没有这么乐观和简单，例如下面的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// 类OrdersViewModel</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">orderNameForIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">orders</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="n">name</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nf">orderPriceForIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">orders</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="n">price</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">orderDescForIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">orders</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="n">desc</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">orderIncreasePrice:</span><span class="p">(</span><span class="n">NSNumber</span> <span class="o">*</span><span class="p">)</span><span class="nv">value</span> <span class="nf">forIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">orders</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="n">increasePrice</span><span class="o">:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 以下略更多的透传</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个看起来，又是如此的相似，但是老办法却搞不定，难道我们注定就要透传和维护下去么？当然不是的。</p>

<p>除了快速转发，还有标准消息转发，不过想要实现，还是需要费一番周章的。</p>

<p>所谓的标准转发，就是实现<code>- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</code>和<code>- (void)forwardInvocation:(NSInvocation *)anInvocation</code>这两个方法进行转发。</p>

<p><code>NSMethodSignature</code>是方法签名，为什么要有这个腻？那是因为selector其实只是一个字符串，从它并不能知道参数的类型和返回值的类型，而方法签名实际上是用来描述参数的类型和返回值的类型的。也就是说，相同的返回值与参数的所有selector的签名其实是一致的。而Objc运行时要根据对象返回的这个签名来抓取参数，然后才会调用<code>- (void)forwardInvocation:(NSInvocation *)anInvocation</code>这个方法。</p>

<p><code>NSInvocation</code>这个类，和我们平常用的<code>- (id)performSelector:(SEL)aSelector withObject:(id)object</code>的有相同的作用，不过更为多元化，可以管理参数和返回值。</p>

<p>首先来实现<code>- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</code>这个方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSMethodSignature</span> <span class="o">*</span><span class="p">)</span><span class="nf">methodSignatureForSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">aSelector</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSMethodSignature</span><span class="o">*</span> <span class="n">signature</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">selectorName</span> <span class="o">=</span> <span class="n">NSStringFromSelector</span><span class="p">(</span><span class="n">aSelector</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">self</span> <span class="n">selectorNameCheck</span><span class="o">:</span><span class="n">selectorName</span><span class="p">]</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">signature</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">targetMethodSignature</span><span class="o">:</span><span class="n">selectorName</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">signature</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">selectorNameCheck:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">selectorName</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSPredicate</span> <span class="o">*</span><span class="n">predicate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSPredicate</span> <span class="n">predicateWithFormat</span><span class="o">:</span><span class="s">@&quot;SELF BEGINSWITH &#39;order&#39; AND (SELF ENDSWITH &#39;forIndex:&#39; OR SELF ENDSWITH &#39;ForIndex:&#39;)&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">predicate</span> <span class="n">evaluateWithObject</span><span class="o">:</span><span class="n">selectorName</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSMethodSignature</span> <span class="o">*</span><span class="p">)</span><span class="nf">targetMethodSignature:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">selectorName</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">Order</span> <span class="n">instanceMethodSignatureForSelector</span><span class="o">:</span><span class="p">[</span><span class="n">self</span> <span class="n">targetSelector</span><span class="o">:</span><span class="n">selectorName</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nf">targetSelector:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">selectorName</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSMutableString</span> <span class="o">*</span><span class="n">newSelectorName</span> <span class="o">=</span> <span class="p">[</span><span class="n">selectorName</span> <span class="n">mutableCopy</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">newSelectorName</span> <span class="n">deleteCharactersInRange</span><span class="o">:</span><span class="p">[</span><span class="n">selectorName</span> <span class="n">rangeOfString</span><span class="o">:</span><span class="s">@&quot;forIndex:&quot;</span> <span class="n">options</span><span class="o">:</span><span class="n">NSCaseInsensitiveSearch</span><span class="o">|</span><span class="n">NSBackwardsSearch</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">newSelectorName</span> <span class="n">deleteCharactersInRange</span><span class="o">:</span><span class="p">[</span><span class="s">@&quot;order&quot;</span> <span class="n">rangeOfString</span><span class="o">:</span><span class="n">className</span> <span class="n">options</span><span class="o">:</span><span class="n">NSCaseInsensitiveSearch</span><span class="p">]];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">NSSelectorFromString</span><span class="p">(</span><span class="n">newSelectorName</span><span class="p">.</span><span class="n">uncapitalizedString</span><span class="p">);</span> <span class="c1">// uncapitalizedString是我通过类别加的新方法，就是把首字母小写，大家试的时候，随便实现以下就可以了。</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>大功告成，我们先用Predicate匹配了是否以order开头，以forIndex或者ForIndex结尾，然后还把order和forIndex去掉，得到了正确的selector，并取得了新的signature。然后是调用部分。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">forwardInvocation:</span><span class="p">(</span><span class="n">NSInvocation</span> <span class="o">*</span><span class="p">)</span><span class="nv">anInvocation</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">seletor</span> <span class="o">=</span> <span class="p">[</span><span class="n">anInvocation</span> <span class="n">selector</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">selectorName</span> <span class="o">=</span> <span class="n">NSStringFromSelector</span><span class="p">(</span><span class="n">seletor</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">self</span> <span class="n">selectorNameCheck</span><span class="o">:</span><span class="n">selectorName</span><span class="p">]</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSUInteger</span> <span class="n">argCount</span> <span class="o">=</span> <span class="p">[</span><span class="n">anInvocation</span> <span class="n">methodSignature</span><span class="p">].</span><span class="n">numberOfArguments</span><span class="p">;</span>
</span><span class='line'>        <span class="n">NSInteger</span> <span class="n">index</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">anInvocation</span> <span class="n">getArgument</span><span class="o">:&amp;</span><span class="n">index</span> <span class="n">atIndex</span><span class="o">:</span><span class="n">argCount</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">id</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">orders</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NSMethodSignature</span> <span class="o">*</span><span class="n">newSignature</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">targetMethodSignature</span><span class="o">:</span><span class="n">selectorName</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSInvocation</span> <span class="o">*</span><span class="n">newInvocation</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSInvocation</span> <span class="n">invocationWithMethodSignature</span><span class="o">:</span><span class="n">newSignature</span><span class="p">];</span>
</span><span class='line'>        <span class="n">newInvocation</span><span class="p">.</span><span class="n">selector</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">targetSelector</span><span class="o">:</span><span class="n">selectorName</span><span class="p">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">argCount</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="n">NSObject</span> <span class="o">*</span><span class="n">obj</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>           <span class="p">[</span><span class="n">anInvocation</span> <span class="n">getArgument</span><span class="o">:&amp;</span><span class="n">obj</span> <span class="n">atIndex</span><span class="o">:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>           <span class="p">[</span><span class="n">newInvocation</span> <span class="n">setArgument</span><span class="o">:&amp;</span><span class="n">obj</span> <span class="n">atIndex</span><span class="o">:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>       <span class="p">[</span><span class="n">newInvocation</span> <span class="n">invokeWithTarget</span><span class="o">:</span><span class="n">instance</span><span class="p">];</span>
</span><span class='line'>       <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">newSignature</span><span class="p">.</span><span class="n">methodReturnType</span><span class="p">,</span> <span class="s">&quot;@&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="n">NSObject</span> <span class="o">*</span><span class="n">returnValue</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>           <span class="p">[</span><span class="n">newInvocation</span> <span class="n">getReturnValue</span><span class="o">:&amp;</span><span class="n">returnValue</span><span class="p">];</span>
</span><span class='line'>           <span class="p">[</span><span class="n">anInvocation</span> <span class="n">setReturnValue</span><span class="o">:&amp;</span><span class="n">returnValue</span><span class="p">];</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用的时候，先取得参数的个数，然后get最后一个参数，我们知道这个参数就是index，然后取得instance。并生成新的invocation，传递参数，传递返回值。一切看起都那么美好。<strong>但是，它是不工作的。</strong></p>

<p>如果你跑一遍就会发现了，argCount是不对的，就算强制改对，你也会发现index取不回来。这是为什么呢？原因就出在<code>- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</code>的实现上。刚才说了，<strong>Objc运行时要根据对象返回的这个签名来抓取参数</strong>，我们返回的签名，显然没有最后一个参数，所以invocation生成的时候，就没传过来，自然不会生效。可是要怎么解决呢？</p>

<p>这里有一个难题，就是我们需要找到正确的签名，而参数的个数又是不确定的。我用了一个折中的办法，生成了许多假的方法，涵盖了许多的签名。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">voidMethodforIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">voidMethodParam:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_0</span> <span class="nf">forIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">voidMethodParam:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_0</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_1</span> <span class="nf">forIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">voidMethodParam:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_0</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_1</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_2</span> <span class="nf">forIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">voidMethodParam:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_0</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_1</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_2</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_3</span> <span class="nf">forIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">voidMethodParam:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_0</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_1</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_2</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_3</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_4</span> <span class="nf">forIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">voidMethodParam:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_0</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_1</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_2</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_3</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_4</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_5</span> <span class="nf">forIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">voidMethodParam:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_0</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_1</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_2</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_3</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_4</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_5</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_6</span> <span class="nf">forIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">voidMethodParam:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_0</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_1</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_2</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_3</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_4</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_5</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_6</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_7</span> <span class="nf">forIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">voidMethodParam:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_0</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_1</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_2</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_3</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_4</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_5</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_6</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_7</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_8</span> <span class="nf">forIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">voidMethodParam:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_0</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_1</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_2</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_3</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_4</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_5</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_6</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_7</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_8</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_9</span> <span class="nf">forIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">voidMethodParam:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_0</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_1</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_2</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_3</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_4</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_5</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_6</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_7</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_8</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_9</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_10</span> <span class="nf">forIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">idMethodforIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">idMethodParam:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_0</span> <span class="nf">forIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">idMethodParam:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_0</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_1</span> <span class="nf">forIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">idMethodParam:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_0</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_1</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_2</span> <span class="nf">forIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">idMethodParam:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_0</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_1</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_2</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_3</span> <span class="nf">forIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">idMethodParam:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_0</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_1</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_2</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_3</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_4</span> <span class="nf">forIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">idMethodParam:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_0</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_1</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_2</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_3</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_4</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_5</span> <span class="nf">forIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">idMethodParam:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_0</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_1</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_2</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_3</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_4</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_5</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_6</span> <span class="nf">forIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">idMethodParam:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_0</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_1</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_2</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_3</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_4</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_5</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_6</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_7</span> <span class="nf">forIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">idMethodParam:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_0</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_1</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_2</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_3</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_4</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_5</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_6</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_7</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_8</span> <span class="nf">forIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">idMethodParam:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_0</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_1</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_2</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_3</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_4</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_5</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_6</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_7</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_8</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_9</span> <span class="nf">forIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">idMethodParam:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_0</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_1</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_2</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_3</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_4</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_5</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_6</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_7</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_8</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_9</span> <span class="nf">Param:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">_10</span> <span class="nf">forIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看起来好眼晕的说，哈哈。这种方法在C++的模板里也有类似的应用，就是预生成一些内容，考虑一个假定临界值，把所有的可能写出来。有了这些我们就可以这样修改<code>- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</code>这个方法了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSMethodSignature</span> <span class="o">*</span><span class="p">)</span><span class="nf">methodSignatureForSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">aSelector</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSMethodSignature</span><span class="o">*</span> <span class="n">signature</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">selectorName</span> <span class="o">=</span> <span class="n">NSStringFromSelector</span><span class="p">(</span><span class="n">aSelector</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">self</span> <span class="n">selectorNameCheck</span><span class="o">:</span><span class="n">selectorName</span><span class="p">]</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">signature</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">targetMethodSignature</span><span class="o">:</span><span class="n">selectorName</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">signature</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">argCount</span> <span class="o">=</span> <span class="n">signature</span><span class="p">.</span><span class="n">numberOfArguments</span><span class="p">;</span>
</span><span class='line'>            <span class="n">NSMutableString</span> <span class="o">*</span><span class="n">selfSelectorName</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>            <span class="n">NSUInteger</span> <span class="n">insertLoc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">signature</span><span class="p">.</span><span class="n">methodReturnType</span><span class="p">,</span> <span class="s">&quot;v&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">selfSelectorName</span> <span class="o">=</span> <span class="s">@&quot;voidMethodforIndex:&quot;</span><span class="p">.</span><span class="n">mutableCopy</span><span class="p">;</span>
</span><span class='line'>                <span class="n">insertLoc</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">signature</span><span class="p">.</span><span class="n">methodReturnType</span><span class="p">,</span> <span class="s">&quot;@&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">selfSelectorName</span> <span class="o">=</span> <span class="s">@&quot;idMethodforIndex:&quot;</span><span class="p">.</span><span class="n">mutableCopy</span><span class="p">;</span>
</span><span class='line'>                <span class="n">insertLoc</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">NSAssert</span><span class="p">(</span><span class="nb">NO</span><span class="p">,</span> <span class="s">@&quot;Class %@ method %@ return a value neither void or id&quot;</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">proxyClass</span><span class="p">),</span> <span class="n">selectorName</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">argCount</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">selfSelectorName</span> <span class="n">insertString</span><span class="o">:</span><span class="s">@&quot;Param:&quot;</span> <span class="n">atIndex</span><span class="o">:</span><span class="n">insertLoc</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">signature</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">class</span> <span class="n">instanceMethodSignatureForSelector</span><span class="o">:</span><span class="n">NSSelectorFromString</span><span class="p">(</span><span class="n">selfSelectorName</span><span class="p">)];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">signature</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>拿到正确的signature之后，我们根据返回值的类型和参数的个数，生成一个selector的字符串，并根据这个得到新的signature。至此，这个改造总算完成了。我们的新的方法可以不用修改代码而实现了。</p>

<p>这时，可能你就会问了，这样搞起来，不是比原来的代码还多了么？事实确实如此，但是我们用这个应付了以后的种种变化。经过合理的封装，不难得到一个可以复用的例子，我也打算开一个新的开源项目<a href="https://github.com/WilliamZang/ZFastProxy">ZFastProxy</a>，把可复用的组件分享出去。</p>

<p>很多时候，用动态特性可以让代码变得“神奇”起来，它更加的智能，也让你的开发变得越来越有趣，因为我们是为了未来而开发，而不是当下。以一种以不变应万变的思维来做事是快乐的，它同时也锻炼我们更高层次的抽象和提高了我们开发的技巧。</p>

<p>希望我的例子可以起到抛砖引玉的作用，让更多的人创造出更好的可复用组件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014-8-14 周四 晴]]></title>
    <link href="http://williamzang.com/blog/2014/08/14/2014-8-14-zhou-si-qing/"/>
    <updated>2014-08-14T11:24:34+08:00</updated>
    <id>http://williamzang.com/blog/2014/08/14/2014-8-14-zhou-si-qing</id>
    <content type="html"><![CDATA[<p>每天思绪万千，不停涌入的想法，总需要收集起来，所以，打算从今天开始，写日记。没错，程序员日记，记录每天思绪的点点滴滴，说不定某一天就能用到了，呵呵。</p>

<p>设计模式在程序员的耳中也算耳熟能详了，今天一早刷新Github的时候，发现onevcat start了一个叫做<a href="https://github.com/ochococo/Design-Patterns-In-Swift">ochococo/Design-Patterns-In-Swift</a>的项目，勾起了我对设计模式的感慨。</p>

<p>虽说如此的如雷贯耳，但是真正用的好的，并且不滥用的还是少数。绝大多说的程序员们还是处于邯郸学步的状态，在未领会设计原则的状态下，把设计模式生搬硬套上的不是少数。</p>

<p>昨天看的CSDN咨询上《<a href="http://www.csdn.net/article/2014-08-13/2821174-Bruce-lee-was-a-Programmer">假如李小龙是程序员……</a>》也提到过</p>

<blockquote><p>“所有固定的模式都是缺乏适应性和塑造性的。这是固定模式的死穴。”<br/>
注解：没有所谓的秘诀银弹。没有绝对的设计模式。每样事物都有其自身特点。</p></blockquote>

<p>所以以无法为有法，以无形为有形，才能让设计模式在你的设计中起到重要的作用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用jenkins+calabash+cocoapods搭建ios持续集成环境]]></title>
    <link href="http://williamzang.com/blog/2014/07/23/shi-yong-jenkins-plus-calabash-plus-cocoapodsda-jian-ioschi-xu-ji-cheng-huan-jing/"/>
    <updated>2014-07-23T16:19:58+08:00</updated>
    <id>http://williamzang.com/blog/2014/07/23/shi-yong-jenkins-plus-calabash-plus-cocoapodsda-jian-ioschi-xu-ji-cheng-huan-jing</id>
    <content type="html"><![CDATA[<h2>持续集成</h2>

<p>持续集成究竟是什么呢？根据敏捷大师Martin Fowler的定义:</p>

<blockquote><p>持续集成是一种软件开发实践。在持续集成中，团队成员频繁集成他们的工作成果，一般每人每天至少集成一次，也可以多次。每次集成会经过自动构建（包括自动测试）的检验，以尽快发现集成错误。许多团队发现这种方法可以显著减少集成引起的问题，并可以加快团队合作软件开发的速度。</p></blockquote>

<p>只要是开发就有分工，哪怕是自己一个写也要分成多个模块。随着项目越来越大，模块也越来越多，各个模块是否可以征程协作就成了问题，有了持续集成，可以有如下好处：</p>

<ol>
<li>持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量；</li>
<li>持续集成保障了每个时间点上团队成员提交的代码是能成功集成的。换言之，任何时间点都能第一时间发现软件的集成问题，使任意时间发布可部署的软件成为了可能；</li>
<li>持续集成还能利于软件本身的发展趋势，这点在需求不明确或是频繁性变更的情景中尤其重要，持续集成的质量能帮助团队进行有效决策，同时建立团队对开发产品的信心。</li>
</ol>


<p>下面就给大家介绍，如何使用Jenkins+Calabash搭建持续集成开发环境。</p>

<h2>环境</h2>

<p>XCode 5.0</p>

<p>Mac OS X 10.9.2</p>

<h2>Cocoapods</h2>

<h3>CocoaPods简介</h3>

<p>CocoaPods是一个负责管理iOS项目中第三方开源代码的工具。CocoaPods项目的源码在Github上管理。该项目开始于2011年8月12日，经过一年多的发展，现在已经超过1000次提交，并且持续保持活跃更新。开发iOS项目不可避免地要使用第三方开源库，CocoaPods的出现使得我们可以节省设置和更新第三方开源库的时间。</p>

<h3>安装Cocoapods</h3>

<h4>安装Homebrew</h4>

<p><a href="http://brew.sh">Homebrew</a>是Mac下著名的包管理工具，RVM和以后用到xctool都需要用这个来安装，相当于Ubuntu的Apt-get。</p>

<p>安装方法是在命令行中键入</p>

<pre><code>ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
</code></pre>

<p>之后执行环境检查</p>

<pre><code>brew doctor
</code></pre>

<p>检查没有错误就可以使用了，如果出现错误，请参考提示进行修正。</p>

<p>确认无误后，可以安装第一个应用curl，一个用来下载的工具。使用命令</p>

<pre><code>brew install curl
</code></pre>

<h4>安装RVM</h4>

<p>虽然Mac默认都带有Ruby，但是有些时候使用起来很麻烦(例如必须使用sudo来安装gem)并且只有一个版本，所以我们使用<a href="http://rvm.io">RVM</a>来管理ruby的版本，ruby是自动化测试工具calabash的运行环境，所以必须要有。</p>

<p>安装方法是命令行中键入</p>

<pre><code>\curl -sSL https://get.rvm.io | bash -s stable
</code></pre>

<p><em>过程中可能需要输入sudo密码。</em></p>

<p>使用淘宝源替换</p>

<pre><code>sed -i .bak 's!cache.ruby-lang.org/pub/ruby!ruby.taobao.org/mirrors/ruby!' $rvm_path/config/db
</code></pre>

<h4>安装Ruby</h4>

<p>使用rvm下载ruby2.0版本</p>

<pre><code>rvm install 2.0.0
</code></pre>

<p>选用2.0.0版本的ruby，并设置为默认</p>

<pre><code>rvm use 2.0.0 --default
</code></pre>

<p>使用淘宝源替换gem源</p>

<pre><code>rvm source --add http://ruby.taobao.org/
rvm source --remove https://rubygems.org/
</code></pre>

<h4>安装Cocoapods</h4>

<p>CocoaPods是一个用来帮助我们管理第三方依赖库的工具。它可以解决库与库之间的依赖关系，下载库的源代码，同时通过创建一个Xcode的workspace来将这些第三方库和我们的工程连接起来，供我们开发使用。</p>

<p>通过Gem安装Cocoapods</p>

<pre><code>gem install cocoapods
</code></pre>

<p>执行cocoapods的初始化</p>

<pre><code>pod setup
</code></pre>

<p><em>该过程需要到github上拉取specs，速度很慢，可以喝杯咖啡慢慢等</em></p>

<h3>使用Cocoapods</h3>

<p>首先创建一个普通项目来演示下如何使用Cocoapods。</p>

<p><img src="http://williamzang.com/images/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE1.png" alt="创建项目1" /><br/>
<img src="http://williamzang.com/images/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE2.png" alt="创建项目2" /></p>

<p>之后在命令行里面,进入到你的项目路径</p>

<pre><code>cd /path/to/your/project
pod init
</code></pre>

<p>之后会在项目根目录下创建好Podfile，修改下Podfile的内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> # #为Podfile的注释行，Podfile实际上是一个ruby代码段
</span><span class='line'> platform :ios, "6.0" # platform后面跟平台和版本号，这里是ios6平台
</span><span class='line'> 
</span><span class='line'> # pod 'MKNetworkKit' 像这样写就可以引入第三方库了，为了简化，这里没有引入任何库</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>在目录执行pod插件install命令</p>

<pre><code>pod install 
</code></pre>

<p><em>每次使用pod install，它都会到github上更新spec库，耗费了不少时间，可以使用下面的命令跳过这个过程</em></p>

<pre><code>pod install --no-repo-update
</code></pre>

<p>执行之后，会提示没有引入任何的第三方库，不要担心(因为我们真的没有引入)。你会发现目录上多了integration_test.xcworkspace这个工作区文件，以后我们就都使用这个打开项目了。</p>

<p>打开后如图所示<br/>
<img src="http://williamzang.com/images/%E5%BC%95%E5%85%A5Pod%E5%90%8E%E7%9A%84%E5%B7%A5%E7%A8%8B.png" alt="引入Pod后的工程" /></p>

<p>恭喜您，已经可以正常使用Cocoapods了。下一步就是使用Calabash进行自动化测试了。</p>

<h2>Calabash</h2>

<p><a href="http://calaba.sh">Calabash</a>是一款开源的跨平台UI测试工具，目前支持iOS和Android。它使用<a href="http://cukes.info">Cucumber</a>作为测试核心，Cucumber是一个在敏捷团队十分流行的自动化的功能测试工具，它使用接近于自然语言的特性文档进行用例的书写和测试，支持多语言和多平台。</p>

<h3>安装Calabash</h3>

<pre><code>gem install calabash-cucumber
</code></pre>

<h3>安装Calabash中文支持包</h3>

<pre><code>gem install calabash-cucumber-ios-cn
</code></pre>

<h3>新建集成测试的Target</h3>

<p>重新打开工作区，然后选择integration_test这个工程，打开配置，targets中integration_test上右键进行复制。<br/>
<img src="http://williamzang.com/images/%E6%96%B0%E5%BB%BA%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95%E7%9B%AE%E6%A0%87.png" alt="新建集成测试目标" /><br/>
<em>如果出现Duplicate iPhone Target对话框，选择Duplicate Only就可以，另外一个选项是复制并转换成iPad程序。</em></p>

<p>之后修改目标的名称<br/>
<img src="http://williamzang.com/images/%E4%BF%AE%E6%94%B9%E7%9B%AE%E6%A0%87%E5%90%8D%E7%A7%B0.png" alt="修改目标名称" /></p>

<p>修改项目配置
<img src="http://williamzang.com/images/%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE.png" alt="修改项目配置" /></p>

<p>修改scheme<br/>
<img src="http://williamzang.com/images/%E4%BF%AE%E6%94%B9scheme1.png" alt="修改scheme1" /><br/>
<img src="http://williamzang.com/images/%E4%BF%AE%E6%94%B9scheme2.png" alt="修改scheme2" /></p>

<p>共享scheme，目的是在版本管理中，让其他用户也可以获取到这些scheme<br/>
<img src="http://williamzang.com/images/%E5%85%B1%E4%BA%ABscheme.png" alt="共享scheme" /></p>

<p>这样新的测试目标就创建好了，为什么要创建新的目标呢？</p>

<ol>
<li>不希望在发布的产品中包含测试代码</li>
<li>calabash默认启动-cal结尾的目标</li>
</ol>


<h3>引入Calabash包</h3>

<p>修改Podfile文件，加入新的pod</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>target 'integration_test-cal', exclusive: false do
</span><span class='line'>  pod 'Calabash'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>到命令行里，进入到自己的目录，执行</p>

<pre><code>pod install --no-repo-update
</code></pre>

<p>执行成功后，创建用例模板</p>

<pre><code>calabash-ios gen
</code></pre>

<p>屏幕会出现</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>----------Question----------
</span><span class='line'>I'm about to create a subdirectory called features.
</span><span class='line'>features will contain all your calabash tests.
</span><span class='line'>Please hit return to confirm that's what you want.
</span><span class='line'>---------------------------</span></code></pre></td></tr></table></div></figure>


<p>按回车确认，就生成了features文件夹，我们的用例和测试配置都在这里了。你可以把features这个文件夹拖到项目中，方便使用xcode直接编辑，<strong>注意不要选择任何目标</strong>，以为这些文件根本没有必要编译和存到app中。</p>

<h3>编写用例</h3>

<p>Cucumber是使用<a href="https://github.com/cucumber/gherkin">gherkin</a>来进行用例描述的，这是一种近乎自然语言的脚本，并且对多语言有很好的支持。具体的语法可以查阅它的<a href="https://github.com/cucumber/cucumber/wiki/Gherkin">官方wiki</a>。</p>

<p>这里我们先写一个简单用例，修改features/my_first.feature</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># language: zh-CN  
</span><span class='line'>功能: 运行基准测试
</span><span class='line'>  做为一个iOS开发者
</span><span class='line'>  我希望有一个简单的基准测试
</span><span class='line'>  使我可以快速的开启测试
</span><span class='line'>
</span><span class='line'>场景: 基准测试
</span><span class='line'>  假如 应用正在运行
</span><span class='line'>  那么 我把应用切到后台3秒</span></code></pre></td></tr></table></div></figure>


<p>是的，就是这样的用例！你可以书写自然语言来描述一个功能，calabash就使用cucumber帮您测试了，神奇吧。</p>

<p>接下来还需要修改features/step_definitions/calabash_steps.rb，在这里包含中文解析，在最下面加上</p>

<pre><code>require 'calabash-cucumber-ios-cn/calabash_steps.rb'
</code></pre>

<p>这个包里面带有中文的功能说明，具体可以看<a href="https://github.com/cpunion/calabash-cucumber-cn/blob/master/PredefinedSteps.md">文档</a>。</p>

<h3>执行用例</h3>

<p>激动人心的时刻终于到了，首先编译integration_test-cal这个scheme，然后使用模拟器运行一下，在模拟器打开Accessibility Inspector。模拟器->设置(Settings)&ndash;>通用(General)&ndash;>辅助功能(Accessibity)&ndash;>Accessibility Inspector开启。</p>

<p>打开命令行，进到目录中执行命令</p>

<pre><code>cucumber
</code></pre>

<p>可能需要输入密码，之后就看到模拟器重新加载，并按照我们的用例开始自动执行了。</p>

<p>执行结束后，会有下图的结果。</p>

<p><img src="http://williamzang.com/images/%E7%BB%93%E6%9E%9C%E6%88%AA%E5%9B%BE.png" alt="结果截图" /></p>

<p>恭喜我们的2个步骤都成功了。快点用更多的功能和用例来测试吧^_^。</p>

<p>到这里，每个开发人员都可以通过cucumber命令来对自己写的内容进行测试了，这和我们的持续集成还有一段距离，那么接下来，我们介绍Jenkins这个持续集成web工具，实现真正的持续集成。</p>

<h2>Jenkins</h2>

<p>Jenkins 是一个开源项目，提供了一种易于使用的持续集成系统，使开发者从繁杂的集成中解脱出来，专注于更为重要的业务逻辑实现上。同时 Jenkins 能实施监控集成中存在的错误，提供详细的日志文件和提醒功能，还能用图表的形式形象地展示项目构建的趋势和稳定性。</p>

<h3>XCTool</h3>

<p>使用Jenkins进行持续集成之前，还有一个前提，就是编译这个过程需要自动化，中途用xcode手动点的不行，所以我们需要有命令可以一次编译我们的工程，这里我们使用<a href="https://github.com/facebook/xctool">xctool</a>这个工具，是facebook写的一个集成工具，用来编译和打包程序的。</p>

<p>安装方法是使用homebrew，在命令行执行</p>

<pre><code>brew install xctool
</code></pre>

<p>安装好在程序目录下测试一下是否可以编译</p>

<pre><code> xctool -workspace integration_test.xcworkspace -scheme integration_test-cal -sdk iphonesimulator7.1 clean build
</code></pre>

<p><em>注意这里的sdk每个人可能不同，要根据本机安装的sdk来写</em> ， 查看的方法是执行命令</p>

<pre><code>xcodebuild -showsdks
</code></pre>

<p>如果显示<code>** BUILD SUCCEEDED **</code>那么可以进入下一步了。</p>

<h3>Jenkins</h3>

<p>安装jenkins还是使用brew</p>

<pre><code>brew install jenkins
</code></pre>

<p>安装好之后，可以通过使用命令行启动</p>

<pre><code>java -jar /usr/local/opt/jenkins/libexec/jenkins.war
</code></pre>

<p>如果想自动启动，需要先执行以下命令，创建启动项</p>

<pre><code>ln -sfv /usr/local/opt/jenkins/*.plist ~/Library/LaunchAgents
</code></pre>

<p>可以编辑一下~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist这个文件</p>

<pre><code>open ~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist
</code></pre>

<p>想要让局域网都可以访问，需要把&mdash;httpListenAddress=127.0.0.1改成自己的局域网IP</p>

<p>手动启动启动项可以执行</p>

<pre><code>launchctl load ~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist
</code></pre>

<p>之后用浏览器就可以访问<code>http://localhost:8080/</code>来登录jenkins了</p>

<p><img src="http://williamzang.com/images/Jenkins%E7%BD%91%E9%A1%B5%E6%88%AA%E5%9B%BE.png" alt="Jenkins网页截图" /></p>

<p>Jenkins启动之后，可以配置用户权限，但是我们为了简单，先不配置用户。</p>

<h3>Jenkins Plugin</h3>

<p>Jenkins有一个很方便的功能，就是可以通过插件形式进行扩展，为了支持我们的持续集成，我们需要先安装必要的插件。</p>

<p>进入Jenkins网页的系统管理->插件管理->高级，找到右下角的“立即获取”就可以获得所有的插件信息了。</p>

<p><img src="http://williamzang.com/images/Jenkins%E8%8E%B7%E5%8F%96%E6%9C%80%E6%96%B0%E6%8F%92%E4%BB%B6.png" alt="Jenkins获取最新插件" /></p>

<p>更新好之后，在可选插件里面，安装如下插件</p>

<pre><code>Git Server Plugin               #Git的支持，如果用svn就不需要了
Git Client Plugin               #Git的支持，如果用svn就补需要了
Rvm                             #加载RVM环境变量以实用ruby的cucumber命令
Cucumber Test Result Plugin     #解析Cucumber的测试报告
</code></pre>

<p><em>记得安装时勾选更新完自动重启</em></p>

<p>至此，我们持续集成的所有环境应该都满足了。</p>

<h3>托管你的项目</h3>

<p>Jenkins一定要从一个地方获得一份软件副本的，所以，要想使用持续集成，必须要有一个版本管理工具，在Jenkins中成为scm，我们的例子使用git，并且我已经将测试工程上传到<a href="https://code.csdn.net/">CODE</a>服务器上，地址在这里:<a href="https://code.csdn.net/zangcw/integration_test">https://code.csdn.net/zangcw/integration_test</a></p>

<h3>创建一个项目</h3>

<p>当你的源代码已经在代码托管服务器上之后，现在就可以在jenkins创建一个项目了。<br/>
我们创建一个自由风格的软件项目<br/>
<img src="http://williamzang.com/images/%E5%88%9B%E5%BB%BAJenkins%E9%A1%B9%E7%9B%AE.png" alt="创建Jenkins项目" /></p>

<p>并且对其配置<br/>
<img src="http://williamzang.com/images/%E9%85%8D%E7%BD%AEJenkins%E9%A1%B9%E7%9B%AE.png" alt="配置Jenkins项目" /></p>

<p>主要配置如下内容：</p>

<ul>
<li>源码管理，示例中配置为<a href="https://code.csdn.net/zangcw/integration_test.git">https://code.csdn.net/zangcw/integration_test.git</a></li>
<li>构建环境，要勾选RVM，否则没有办法在脚本中执行<code>cucumber</code>这个命令</li>
<li>构建脚本，选择Execute shell，内容如下，请根据需要自行修改</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd $WORKSPACE
</span><span class='line'>/usr/local/bin/xctool -workspace integration_test.xcworkspace -scheme integration_test-cal -sdk iphonesimulator7.1 clean build
</span><span class='line'>mkdir -p test-reports
</span><span class='line'>cucumber --format json -o test-reports/cucumber.json</span></code></pre></td></tr></table></div></figure>


<ul>
<li>构建后的操作，选择Publish Cucumber test result report，指定报告的目录<code>test-reports/cucumber.json</code></li>
</ul>


<p>之后点击应用，即完成了配置<br/>
<img src="http://williamzang.com/images/%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E5%AE%8C%E6%AF%95.png" alt="项目创建完毕" /></p>

<h3>立即构建</h3>

<p>还在等什么？马上点击立即构建吧。。。<br/>
<img src="http://williamzang.com/images/%E7%AB%8B%E5%8D%B3%E6%9E%84%E5%BB%BA.png" alt="立即构建" /></p>

<p>等待构建的过程中，我们可以查看控制台输出<br/>
<img src="http://williamzang.com/images/%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA.png" alt="控制台输出" /></p>

<p><em>模拟器也会在中途弹出，然后自动关闭</em></p>

<p>构建结束后，我们可以看到构建结果<br/>
<img src="http://williamzang.com/images/%E6%9E%84%E5%BB%BA%E7%BB%93%E6%9E%9C.png" alt="构建结果" /></p>

<p>结果展示了变更、由谁触发的构建和测试报告，更多的信息大家可以自行挖掘。总之构建是完成了。</p>

<p>想要进行持续构建，需要设置成每个一段时间自动构建，在Build periodically中配置即可。</p>

<h3>下一步该做什么？</h3>

<p>在淌通了这一整套流程之后，其实还是有很多事情等着我们来做的，下面是几个例子：</p>

<ol>
<li>为Jenkins创建用户管理</li>
<li>修改脚本，自动存放ipa并上传到特定服务器</li>
<li>配置构建策略，每日1次，或者多次，或者监听git变化，有上传就构建</li>
<li>配置邮件策略，使大家及时获得反馈</li>
</ol>


<p>总之，拥抱集成测试吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[介绍一下开源项目FastAnimationWithPOP]]></title>
    <link href="http://williamzang.com/blog/2014/07/23/jie-shao-yi-xia-kai-yuan-xiang-mu-fastanimationwithpop/"/>
    <updated>2014-07-23T16:07:04+08:00</updated>
    <id>http://williamzang.com/blog/2014/07/23/jie-shao-yi-xia-kai-yuan-xiang-mu-fastanimationwithpop</id>
    <content type="html"><![CDATA[<p>这是一个很简单的动画框架，基于Facebook的POP库。使用它你就可以在故事版中以0行代码的代价来添加动画了。</p>

<p>Github上地址是 <a href="https://github.com/WilliamZang/FastAnimationWithPOP">这里</a>.</p>

<p>你可以从<a href="https://github.com/WilliamZang/FastAnimationWithPopDemo">这里</a>下载DEMO查看效果.</p>

<p><strong>如果你觉得不错，欢迎在到<a href="https://github.com/WilliamZang/FastAnimationWithPOP">这里</a>点个赞，方便让更多人注意到它</strong></p>

<p><img src="https://raw.githubusercontent.com/WilliamZang/FastAnimationWithPOP/master/Docs/demo.gif" alt="Demo" /></p>

<h2>功能</h2>

<ul>
<li>使用属性来添加一个动画到任意的View。</li>
<li>在nib或者故事版唤醒时自动执行动画。</li>
<li>也可以随时手动执行动画。</li>
<li>控制动画的细节。</li>
<li>给control绑定一些动画，例如按下松开等状态。</li>
<li>轻松的扩展新的动画，只需要实现<code>FastAnimationProtocol</code>、<code>ControlFastAnimationProtocol</code> 和 <code>FastAnimationReverseProtocol</code>这几个协议.</li>
</ul>


<h2>环境要求</h2>

<p>iOS SDK: iOS 6.0+</p>

<p>XCode版本: 5.0+</p>

<h2>如何安装</h2>

<p>最好的办法是使用<a href="http://cocoadocs.org">CocoaPods</a>:</p>

<ol>
<li><p>添加这行到你的<code>podfile</code>文件 <code>pod 'FastAnimation'</code></p></li>
<li><p>安装更新 <code>pod install</code></p></li>
</ol>


<p>如果想要尝试最新的版本，你可以添加这个<code>pod 'FastAnimation', :head</code>.</p>

<h2>使用指导</h2>

<h3>1. 在故事板里使用</h3>

<p>你可以通过设置用户自定义运行时属性(user defined runtime attributes)给View添加一个动画。</p>

<p><img src="https://raw.githubusercontent.com/WilliamZang/FastAnimationWithPOP/master/Docs/stroyBoard1.png" alt="StroyBoard1" /></p>

<p><img src="https://raw.githubusercontent.com/WilliamZang/FastAnimationWithPOP/master/Docs/stroyBoard2.png" alt="StroyBoard2" /></p>

<p>下面是一些属性的含义：</p>

<h4>UIView的属性</h4>

<ul>
<li><p>animationType</p>

<p>  通过这个属性来指定动画的类型，可以是完整的类名，也可以省略<code>FAAnimation</code>前缀.</p></li>
<li><p>delay</p>

<p>  执行动画的延时，以秒为单位。</p></li>
<li><p>animationParams</p>

<p>  这个是各个动画的灵活参数，你可以从动画类的头文件中找到信息，例如下面：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#define kSpringBounciness   (@&quot;animationParams.springBounciness&quot;)</span>
</span><span class='line'><span class="cp">#define kSpringSpeed        (@&quot;animationParams.springSpeed&quot;)</span>
</span><span class='line'><span class="cp">#define kDynamicsTension    (@&quot;animationParams.dynamicsTension&quot;)</span>
</span><span class='line'><span class="cp">#define kDynamicsFriction   (@&quot;animationParams.dynamicsFriction&quot;)</span>
</span><span class='line'><span class="cp">#define kDynamicsMass       (@&quot;animationParams.dynamicsMass&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>startAnimationWhenAwakeFromNib</p>

<p>  定义是否需要在故事板唤醒的时候就执行动画，默认是<code>YES</code>。</p></li>
</ul>


<h4>UIControl的属性</h4>

<ul>
<li><p>bindingAnimationType</p>

<p>  通过这个属性来指定控件动画的类型，可以是完整的类名，也可以省略<code>FAAnimation</code>前缀.</p></li>
</ul>


<h3>2. 代码写View的应用</h3>

<p>在代码写View中使用FastAnimation同样方便。</p>

<p>你可以设置动画类型等属性，然后执行<code>- (void)startFAAnimation</code>即可。就像这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">UIView</span> <span class="o">*</span><span class="n">view</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithFrame</span><span class="o">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)];</span>
</span><span class='line'><span class="n">view</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">];</span>
</span><span class='line'><span class="n">view</span><span class="p">.</span><span class="n">animationType</span> <span class="o">=</span> <span class="s">@&quot;Shake&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">view</span><span class="p">.</span><span class="n">animationParams</span><span class="p">[</span><span class="s">@&quot;velocity&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="p">@</span><span class="o">-</span><span class="mi">7000</span><span class="p">;</span>
</span><span class='line'><span class="c1">// You can also set params like this</span>
</span><span class='line'><span class="c1">// [view setValue:@-7000 forKeyPath:kShakeVelocity];</span>
</span><span class='line'><span class="p">[</span><span class="n">view</span> <span class="n">startFAAnimation</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>还有这些扩展的用法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// In UIView instance.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">startFAAnimation</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">reverseFAAnimation</span><span class="p">;</span>
</span><span class='line'><span class="c1">// In UIControl instance.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">bindingFAAnimation</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">unbindingFAAnimation</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. 定义一个新的动画扩展</h3>

<p>轻松的扩展新的动画，只需要实现<code>FastAnimationProtocol</code>、<code>ControlFastAnimationProtocol</code> 和 <code>FastAnimationReverseProtocol</code>这几个协议.</p>

<p>就像这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// new_animation.h</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">FAAnimationNewAnimation</span> : <span class="nc">NSObject</span><span class="o">&lt;</span><span class="n">FastAnimationProtocol</span><span class="p">,</span>
</span><span class='line'><span class="n">FastAnimationReverseProtocol</span><span class="o">&gt;</span> <span class="c1">// Maybe only FastAnimationProtocol</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'><span class="c1">// new_animation.m</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">FAAnimationBounceRight</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">performAnimation:</span><span class="p">(</span><span class="n">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nv">view</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// some thing you like.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">stopAnimation:</span><span class="p">(</span><span class="n">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nv">view</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// some thing you like.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">reverseAnimation:</span><span class="p">(</span><span class="n">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nv">view</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>     <span class="c1">// some thing you like.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">stopReverse:</span><span class="p">(</span><span class="n">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nv">view</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>     <span class="c1">// some thing you like.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. 一些控制动画的操作</h3>

<ul>
<li>停止动画：</li>
</ul>


<p>如果想要手动体制，使用下面的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">stopFAAnimation</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">stopReverseFAAnimation</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>嵌套动画：</li>
</ul>


<p>使用如下方法处理嵌套：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">startFAAnimationNested</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">stopFAAnimationNested</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">reverseFAAnimationNested</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">stopReverseFAAnimationNested</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>目前已经拥有的动画:</h3>

<ul>
<li>反弹动画（4方向）: <code>BounceLeft</code>,<code>BounceRight</code>,<code>BounceUp</code>,<code>BounceDown</code></li>
<li>放大动画（2方向）：<code>ZoomInX</code>,<code>ZoomInY</code></li>
<li>颤动动画</li>
<li>组动画</li>
<li>放大动画</li>
<li>Button的放大效果绑定</li>
<li><strong>更多的动画等着大家的贡献哟！</strong></li>
</ul>


<h2>下一步要做的事</h2>

<ul>
<li>把DEMO和库项目和到同一个Workspace里。</li>
<li>制作更多更好看的DEMO。</li>
<li>假如便捷的转场动画，目前先设法支持iOS7+</li>
<li>确保所有的功能都含有单元测试。</li>
<li>更多更好的动画。</li>
<li>把核心部分和效果部分分离，效果按照iOS5 6 7+来打成不同的包.</li>
<li>支持Swift写扩展.</li>
</ul>

]]></content>
  </entry>
  
</feed>
