<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 杂谈 | 臧成威的博客]]></title>
  <link href="http://williamzang.com/blog/categories/za-tan/atom.xml" rel="self"/>
  <link href="http://williamzang.com/"/>
  <updated>2014-08-31T23:18:31+08:00</updated>
  <id>http://williamzang.com/</id>
  <author>
    <name><![CDATA[臧成威]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[工具链]]></title>
    <link href="http://williamzang.com/blog/2014/08/27/gong-ju-lian/"/>
    <updated>2014-08-27T17:27:45+08:00</updated>
    <id>http://williamzang.com/blog/2014/08/27/gong-ju-lian</id>
    <content type="html"><![CDATA[<p>每一个老开发者，都有很中意的一些工具，对于新的开发者来说，应该是一个很好的指引。我虽然不算什么老开发者，但是也有一定的心得。所以今天就分享一下我对于iOS所用到的工具吧。</p>

<p>最先介绍的是Mac下开发相关的App：</p>

<ol>
<li>同步助手&mdash;&mdash;&mdash;-iPhone同步</li>
<li>AirServer&mdash;&mdash;-用于将苹果设备投射到Mac屏幕上</li>
<li>Alfred 2&mdash;&mdash;&mdash;好用的全局快捷菜单，比较爱用它当计算器</li>
<li>Android File Transfer&mdash;&mdash;Android同步，偶尔需要用到</li>
<li>BetterZip&mdash;&mdash;-压缩解压</li>
<li>Genymotion&mdash;&mdash;-Android虚拟机，用来对比Android效果</li>
<li>iTerm&mdash;&mdash;-终端的最佳替换</li>
<li>MarkMan&mdash;&mdash;&mdash;量图工具（Adobe Air环境）</li>
<li>Mou &mdash;&mdash;&mdash;Markdown编辑工具，正在用</li>
<li>PaintCode&mdash;&mdash;&mdash;OS X、iOS控件自绘工具</li>
<li>plistedit pro&mdash;&mdash;-plist编辑工具</li>
<li>Reveal&mdash;&mdash;&mdash;iOS视图调试工具</li>
<li>Simpholders&mdash;&mdash;&mdash;iOS模拟器应用目录快速查询</li>
<li>Source Tree&mdash;&mdash;-Git客户端</li>
<li>TextMate&mdash;&mdash;-文本编辑</li>
<li>VirtualBox&mdash;&mdash;-虚拟机 用作Genymotion支持</li>
<li>LICEcap&mdash;&mdash;&mdash;&mdash;Git录屏软件，用来跟别人解释发生了什么</li>
<li>Docs for Xcode&mdash;&mdash;-一些开源项目的文档集成</li>
<li>Charles&mdash;&mdash;&mdash;-用来调试网络情况和Hook客户端调用结果的</li>
</ol>


<p>然后是命令行工具：</p>

<ol>
<li>Homebrew&mdash;&mdash;-一切都靠他了</li>
<li>RVM&mdash;&mdash;-Ruby版本管理工具</li>
<li>CocoaPods&mdash;&mdash;iOS、OS X包管理器</li>
<li>Oh-my-zsh&mdash;&mdash;&mdash;漂亮的Zsh shell</li>
<li>xctool&mdash;&mdash;自动化集成</li>
<li>vim&mdash;&mdash;-文本编辑器</li>
<li>calabash&mdash;&mdash;-集成、UI测试工具</li>
<li>mogenerator&mdash;&mdash;&mdash;-用来生成CoreData的子类，比Xcode实用</li>
</ol>


<p>Xcode的插件：</p>

<ol>
<li>Alcatraz&mdash;&mdash;插件管理器，其他的都靠它了</li>
<li>AdjustFontSize&mdash;&mdash;-文本快速放大缩小</li>
<li>FuzzyAutocomplete&mdash;&mdash;&mdash;补全工具，不过这个一开，有点补全太多了</li>
<li>HOStringSense&mdash;&mdash;-NSString的长度测量，文本编码</li>
<li>KSImageNamed&mdash;&mdash;[UIImage imageNamed]的时候，自动出现图片选择</li>
<li>Lin&mdash;&mdash;&mdash;-NSLocalizedString的快速增删改查
7.OMColorSense&mdash;&mdash;&mdash;颜色插件</li>
<li>QuickLocalization&mdash;&mdash;-NSLocalizedString快速生成</li>
<li>RevealPlugin&mdash;&mdash;-快速打开Reveal</li>
<li>Singleton&mdash;&mdash;单例源代码模板</li>
<li>Specta&mdash;&mdash;-specta测试代码模板</li>
<li>VVDocumenter-Xcode&mdash;&mdash;&mdash;&mdash;-代码注释生成器</li>
<li>XVim&mdash;&mdash;&mdash;Xcode的Vim支持</li>
<li>SCXcodeSwitchExpander&mdash;&mdash;&mdash;为枚举自动生成switch-case对</li>
</ol>


<p>最后是我在iOS中喜欢用的库：</p>

<ol>
<li>ReactiveCocoa&mdash;&mdash;&mdash;-著名的RAC框架</li>
<li>ReactiveViewModel&mdash;&mdash;&mdash;RAC支持MVVM的辅助类</li>
<li>libextobjc&mdash;&mdash;-OC运行时扩展</li>
<li>WYPopoverController&mdash;&mdash;iPhone的Popover弹出框</li>
<li>pop&mdash;&mdash;-Facebook的动画库</li>
<li>MBProgressHUD&mdash;&mdash;HUD弹出信息</li>
<li>PinYin4Objc&mdash;&mdash;反解拼音库</li>
<li>MNCalendarView@aceontech&mdash;&mdash;日历</li>
<li>MTDates&mdash;&mdash;NSDate的N多扩展</li>
<li>Mantle&mdash;&mdash;好的简易Model</li>
<li>SDWebImage&mdash;&mdash;-图片缓存</li>
<li>XHImageViewer&mdash;&mdash;图片浏览器，挺多bug，有空给改改</li>
<li>UI7Kit&mdash;&mdash;iOS5 iOS6的iOS7扁平化界面快速替换，注意有坑</li>
<li>AFNetworking&mdash;&mdash;&mdash;网络库</li>
<li>Tweaks&mdash;&mdash;&mdash;Facebook的调试工具，晃一晃微调参数</li>
<li>UALogger&mdash;&mdash;-Log工具</li>
<li>Calabash&mdash;&mdash;-自动化测试工具</li>
<li>Nocilla&mdash;&mdash;网络模拟工具</li>
<li>Reveal-iOS-SDK&mdash;&mdash;-视图调试工具</li>
<li>Expecta&mdash;&mdash;-单元测试断言宏</li>
<li>Specta&mdash;&mdash;单元测试的DSL</li>
<li>OCMock&mdash;&mdash;&mdash;OC的Mock测试工具</li>
<li>MagicalRecord&mdash;&mdash;&mdash;CoreData高级辅助工具</li>
<li>FastAnimationWithPOP&mdash;&mdash;&mdash;我自己写的动画库</li>
</ol>


<p>希望能对大家有所帮助，也欢迎和我交流。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用jenkins+calabash+cocoapods搭建ios持续集成环境]]></title>
    <link href="http://williamzang.com/blog/2014/07/23/shi-yong-jenkins-plus-calabash-plus-cocoapodsda-jian-ioschi-xu-ji-cheng-huan-jing/"/>
    <updated>2014-07-23T16:19:58+08:00</updated>
    <id>http://williamzang.com/blog/2014/07/23/shi-yong-jenkins-plus-calabash-plus-cocoapodsda-jian-ioschi-xu-ji-cheng-huan-jing</id>
    <content type="html"><![CDATA[<h2>持续集成</h2>

<p>持续集成究竟是什么呢？根据敏捷大师Martin Fowler的定义:</p>

<blockquote><p>持续集成是一种软件开发实践。在持续集成中，团队成员频繁集成他们的工作成果，一般每人每天至少集成一次，也可以多次。每次集成会经过自动构建（包括自动测试）的检验，以尽快发现集成错误。许多团队发现这种方法可以显著减少集成引起的问题，并可以加快团队合作软件开发的速度。</p></blockquote>

<p>只要是开发就有分工，哪怕是自己一个写也要分成多个模块。随着项目越来越大，模块也越来越多，各个模块是否可以征程协作就成了问题，有了持续集成，可以有如下好处：</p>

<ol>
<li>持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量；</li>
<li>持续集成保障了每个时间点上团队成员提交的代码是能成功集成的。换言之，任何时间点都能第一时间发现软件的集成问题，使任意时间发布可部署的软件成为了可能；</li>
<li>持续集成还能利于软件本身的发展趋势，这点在需求不明确或是频繁性变更的情景中尤其重要，持续集成的质量能帮助团队进行有效决策，同时建立团队对开发产品的信心。</li>
</ol>


<p>下面就给大家介绍，如何使用Jenkins+Calabash搭建持续集成开发环境。</p>

<h2>环境</h2>

<p>XCode 5.0</p>

<p>Mac OS X 10.9.2</p>

<h2>Cocoapods</h2>

<h3>CocoaPods简介</h3>

<p>CocoaPods是一个负责管理iOS项目中第三方开源代码的工具。CocoaPods项目的源码在Github上管理。该项目开始于2011年8月12日，经过一年多的发展，现在已经超过1000次提交，并且持续保持活跃更新。开发iOS项目不可避免地要使用第三方开源库，CocoaPods的出现使得我们可以节省设置和更新第三方开源库的时间。</p>

<h3>安装Cocoapods</h3>

<h4>安装Homebrew</h4>

<p><a href="http://brew.sh">Homebrew</a>是Mac下著名的包管理工具，RVM和以后用到xctool都需要用这个来安装，相当于Ubuntu的Apt-get。</p>

<p>安装方法是在命令行中键入</p>

<pre><code>ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
</code></pre>

<p>之后执行环境检查</p>

<pre><code>brew doctor
</code></pre>

<p>检查没有错误就可以使用了，如果出现错误，请参考提示进行修正。</p>

<p>确认无误后，可以安装第一个应用curl，一个用来下载的工具。使用命令</p>

<pre><code>brew install curl
</code></pre>

<h4>安装RVM</h4>

<p>虽然Mac默认都带有Ruby，但是有些时候使用起来很麻烦(例如必须使用sudo来安装gem)并且只有一个版本，所以我们使用<a href="http://rvm.io">RVM</a>来管理ruby的版本，ruby是自动化测试工具calabash的运行环境，所以必须要有。</p>

<p>安装方法是命令行中键入</p>

<pre><code>\curl -sSL https://get.rvm.io | bash -s stable
</code></pre>

<p><em>过程中可能需要输入sudo密码。</em></p>

<p>使用淘宝源替换</p>

<pre><code>sed -i .bak 's!cache.ruby-lang.org/pub/ruby!ruby.taobao.org/mirrors/ruby!' $rvm_path/config/db
</code></pre>

<h4>安装Ruby</h4>

<p>使用rvm下载ruby2.0版本</p>

<pre><code>rvm install 2.0.0
</code></pre>

<p>选用2.0.0版本的ruby，并设置为默认</p>

<pre><code>rvm use 2.0.0 --default
</code></pre>

<p>使用淘宝源替换gem源</p>

<pre><code>rvm source --add http://ruby.taobao.org/
rvm source --remove https://rubygems.org/
</code></pre>

<h4>安装Cocoapods</h4>

<p>CocoaPods是一个用来帮助我们管理第三方依赖库的工具。它可以解决库与库之间的依赖关系，下载库的源代码，同时通过创建一个Xcode的workspace来将这些第三方库和我们的工程连接起来，供我们开发使用。</p>

<p>通过Gem安装Cocoapods</p>

<pre><code>gem install cocoapods
</code></pre>

<p>执行cocoapods的初始化</p>

<pre><code>pod setup
</code></pre>

<p><em>该过程需要到github上拉取specs，速度很慢，可以喝杯咖啡慢慢等</em></p>

<h3>使用Cocoapods</h3>

<p>首先创建一个普通项目来演示下如何使用Cocoapods。</p>

<p><img src="/images/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE1.png" alt="创建项目1" /><br/>
<img src="/images/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE2.png" alt="创建项目2" /></p>

<p>之后在命令行里面,进入到你的项目路径</p>

<pre><code>cd /path/to/your/project
pod init
</code></pre>

<p>之后会在项目根目录下创建好Podfile，修改下Podfile的内容</p>

<p>&#8220;`
 # #为Podfile的注释行，Podfile实际上是一个ruby代码段
 platform :ios, &ldquo;6.0&rdquo; # platform后面跟平台和版本号，这里是ios6平台</p>

<p> # pod &lsquo;MKNetworkKit&rsquo; 像这样写就可以引入第三方库了，为了简化，这里没有引入任何库
&#8220;`</p>

<p>在目录执行pod插件install命令</p>

<pre><code>pod install 
</code></pre>

<p><em>每次使用pod install，它都会到github上更新spec库，耗费了不少时间，可以使用下面的命令跳过这个过程</em></p>

<pre><code>pod install --no-repo-update
</code></pre>

<p>执行之后，会提示没有引入任何的第三方库，不要担心(因为我们真的没有引入)。你会发现目录上多了integration_test.xcworkspace这个工作区文件，以后我们就都使用这个打开项目了。</p>

<p>打开后如图所示<br/>
<img src="/images/%E5%BC%95%E5%85%A5Pod%E5%90%8E%E7%9A%84%E5%B7%A5%E7%A8%8B.png" alt="引入Pod后的工程" /></p>

<p>恭喜您，已经可以正常使用Cocoapods了。下一步就是使用Calabash进行自动化测试了。</p>

<h2>Calabash</h2>

<p><a href="http://calaba.sh">Calabash</a>是一款开源的跨平台UI测试工具，目前支持iOS和Android。它使用<a href="http://cukes.info">Cucumber</a>作为测试核心，Cucumber是一个在敏捷团队十分流行的自动化的功能测试工具，它使用接近于自然语言的特性文档进行用例的书写和测试，支持多语言和多平台。</p>

<h3>安装Calabash</h3>

<pre><code>gem install calabash-cucumber
</code></pre>

<h3>安装Calabash中文支持包</h3>

<pre><code>gem install calabash-cucumber-ios-cn
</code></pre>

<h3>新建集成测试的Target</h3>

<p>重新打开工作区，然后选择integration_test这个工程，打开配置，targets中integration_test上右键进行复制。<br/>
<img src="/images/%E6%96%B0%E5%BB%BA%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95%E7%9B%AE%E6%A0%87.png" alt="新建集成测试目标" /><br/>
<em>如果出现Duplicate iPhone Target对话框，选择Duplicate Only就可以，另外一个选项是复制并转换成iPad程序。</em></p>

<p>之后修改目标的名称<br/>
<img src="/images/%E4%BF%AE%E6%94%B9%E7%9B%AE%E6%A0%87%E5%90%8D%E7%A7%B0.png" alt="修改目标名称" /></p>

<p>修改项目配置
<img src="/images/%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE.png" alt="修改项目配置" /></p>

<p>修改scheme<br/>
<img src="/images/%E4%BF%AE%E6%94%B9scheme1.png" alt="修改scheme1" /><br/>
<img src="/images/%E4%BF%AE%E6%94%B9scheme2.png" alt="修改scheme2" /></p>

<p>共享scheme，目的是在版本管理中，让其他用户也可以获取到这些scheme<br/>
<img src="/images/%E5%85%B1%E4%BA%ABscheme.png" alt="共享scheme" /></p>

<p>这样新的测试目标就创建好了，为什么要创建新的目标呢？</p>

<ol>
<li>不希望在发布的产品中包含测试代码</li>
<li>calabash默认启动-cal结尾的目标</li>
</ol>


<h3>引入Calabash包</h3>

<p>修改Podfile文件，加入新的pod</p>

<p><code>
target 'integration_test-cal', exclusive: false do
  pod 'Calabash'
end
</code></p>

<p>到命令行里，进入到自己的目录，执行</p>

<pre><code>pod install --no-repo-update
</code></pre>

<p>执行成功后，创建用例模板</p>

<pre><code>calabash-ios gen
</code></pre>

<p>屏幕会出现</p>

<p>&#8220;`
&mdash;&mdash;&mdash;&mdash;&mdash;Question&mdash;&mdash;&mdash;&mdash;&mdash;
I&rsquo;m about to create a subdirectory called features.
features will contain all your calabash tests.</p>

<h2>Please hit return to confirm that&rsquo;s what you want.</h2>

<p>&#8220;`</p>

<p>按回车确认，就生成了features文件夹，我们的用例和测试配置都在这里了。你可以把features这个文件夹拖到项目中，方便使用xcode直接编辑，<strong>注意不要选择任何目标</strong>，以为这些文件根本没有必要编译和存到app中。</p>

<h3>编写用例</h3>

<p>Cucumber是使用<a href="https://github.com/cucumber/gherkin">gherkin</a>来进行用例描述的，这是一种近乎自然语言的脚本，并且对多语言有很好的支持。具体的语法可以查阅它的<a href="https://github.com/cucumber/cucumber/wiki/Gherkin">官方wiki</a>。</p>

<p>这里我们先写一个简单用例，修改features/my_first.feature</p>

<p>&#8220;`</p>

<h1>language: zh-CN</h1>

<p>功能: 运行基准测试
  做为一个iOS开发者
  我希望有一个简单的基准测试
  使我可以快速的开启测试</p>

<p>场景: 基准测试
  假如 应用正在运行
  那么 我把应用切到后台3秒
&#8220;`</p>

<p>是的，就是这样的用例！你可以书写自然语言来描述一个功能，calabash就使用cucumber帮您测试了，神奇吧。</p>

<p>接下来还需要修改features/step_definitions/calabash_steps.rb，在这里包含中文解析，在最下面加上</p>

<pre><code>require 'calabash-cucumber-ios-cn/calabash_steps.rb'
</code></pre>

<p>这个包里面带有中文的功能说明，具体可以看<a href="https://github.com/cpunion/calabash-cucumber-cn/blob/master/PredefinedSteps.md">文档</a>。</p>

<h3>执行用例</h3>

<p>激动人心的时刻终于到了，首先编译integration_test-cal这个scheme，然后使用模拟器运行一下，在模拟器打开Accessibility Inspector。模拟器->设置(Settings)&ndash;>通用(General)&ndash;>辅助功能(Accessibity)&ndash;>Accessibility Inspector开启。</p>

<p>打开命令行，进到目录中执行命令</p>

<pre><code>cucumber
</code></pre>

<p>可能需要输入密码，之后就看到模拟器重新加载，并按照我们的用例开始自动执行了。</p>

<p>执行结束后，会有下图的结果。</p>

<p><img src="/images/%E7%BB%93%E6%9E%9C%E6%88%AA%E5%9B%BE.png" alt="结果截图" /></p>

<p>恭喜我们的2个步骤都成功了。快点用更多的功能和用例来测试吧^_^。</p>

<p>到这里，每个开发人员都可以通过cucumber命令来对自己写的内容进行测试了，这和我们的持续集成还有一段距离，那么接下来，我们介绍Jenkins这个持续集成web工具，实现真正的持续集成。</p>

<h2>Jenkins</h2>

<p>Jenkins 是一个开源项目，提供了一种易于使用的持续集成系统，使开发者从繁杂的集成中解脱出来，专注于更为重要的业务逻辑实现上。同时 Jenkins 能实施监控集成中存在的错误，提供详细的日志文件和提醒功能，还能用图表的形式形象地展示项目构建的趋势和稳定性。</p>

<h3>XCTool</h3>

<p>使用Jenkins进行持续集成之前，还有一个前提，就是编译这个过程需要自动化，中途用xcode手动点的不行，所以我们需要有命令可以一次编译我们的工程，这里我们使用<a href="https://github.com/facebook/xctool">xctool</a>这个工具，是facebook写的一个集成工具，用来编译和打包程序的。</p>

<p>安装方法是使用homebrew，在命令行执行</p>

<pre><code>brew install xctool
</code></pre>

<p>安装好在程序目录下测试一下是否可以编译</p>

<pre><code> xctool -workspace integration_test.xcworkspace -scheme integration_test-cal -sdk iphonesimulator7.1 clean build
</code></pre>

<p><em>注意这里的sdk每个人可能不同，要根据本机安装的sdk来写</em> ， 查看的方法是执行命令</p>

<pre><code>xcodebuild -showsdks
</code></pre>

<p>如果显示<code>** BUILD SUCCEEDED **</code>那么可以进入下一步了。</p>

<h3>Jenkins</h3>

<p>安装jenkins还是使用brew</p>

<pre><code>brew install jenkins
</code></pre>

<p>安装好之后，可以通过使用命令行启动</p>

<pre><code>java -jar /usr/local/opt/jenkins/libexec/jenkins.war
</code></pre>

<p>如果想自动启动，需要先执行以下命令，创建启动项</p>

<pre><code>ln -sfv /usr/local/opt/jenkins/*.plist ~/Library/LaunchAgents
</code></pre>

<p>可以编辑一下~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist这个文件</p>

<pre><code>open ~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist
</code></pre>

<p>想要让局域网都可以访问，需要把&mdash;httpListenAddress=127.0.0.1改成自己的局域网IP</p>

<p>手动启动启动项可以执行</p>

<pre><code>launchctl load ~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist
</code></pre>

<p>之后用浏览器就可以访问<code>http://localhost:8080/</code>来登录jenkins了</p>

<p><img src="/images/Jenkins%E7%BD%91%E9%A1%B5%E6%88%AA%E5%9B%BE.png" alt="Jenkins网页截图" /></p>

<p>Jenkins启动之后，可以配置用户权限，但是我们为了简单，先不配置用户。</p>

<h3>Jenkins Plugin</h3>

<p>Jenkins有一个很方便的功能，就是可以通过插件形式进行扩展，为了支持我们的持续集成，我们需要先安装必要的插件。</p>

<p>进入Jenkins网页的系统管理->插件管理->高级，找到右下角的“立即获取”就可以获得所有的插件信息了。</p>

<p><img src="/images/Jenkins%E8%8E%B7%E5%8F%96%E6%9C%80%E6%96%B0%E6%8F%92%E4%BB%B6.png" alt="Jenkins获取最新插件" /></p>

<p>更新好之后，在可选插件里面，安装如下插件</p>

<pre><code>Git Server Plugin               #Git的支持，如果用svn就不需要了
Git Client Plugin               #Git的支持，如果用svn就补需要了
Rvm                             #加载RVM环境变量以实用ruby的cucumber命令
Cucumber Test Result Plugin     #解析Cucumber的测试报告
</code></pre>

<p><em>记得安装时勾选更新完自动重启</em></p>

<p>至此，我们持续集成的所有环境应该都满足了。</p>

<h3>托管你的项目</h3>

<p>Jenkins一定要从一个地方获得一份软件副本的，所以，要想使用持续集成，必须要有一个版本管理工具，在Jenkins中成为scm，我们的例子使用git，并且我已经将测试工程上传到<a href="https://code.csdn.net/">CODE</a>服务器上，地址在这里:<a href="https://code.csdn.net/zangcw/integration_test">https://code.csdn.net/zangcw/integration_test</a></p>

<h3>创建一个项目</h3>

<p>当你的源代码已经在代码托管服务器上之后，现在就可以在jenkins创建一个项目了。<br/>
我们创建一个自由风格的软件项目<br/>
<img src="/images/%E5%88%9B%E5%BB%BAJenkins%E9%A1%B9%E7%9B%AE.png" alt="创建Jenkins项目" /></p>

<p>并且对其配置<br/>
<img src="/images/%E9%85%8D%E7%BD%AEJenkins%E9%A1%B9%E7%9B%AE.png" alt="配置Jenkins项目" /></p>

<p>主要配置如下内容：</p>

<ul>
<li>源码管理，示例中配置为<a href="https://code.csdn.net/zangcw/integration_test.git">https://code.csdn.net/zangcw/integration_test.git</a></li>
<li>构建环境，要勾选RVM，否则没有办法在脚本中执行<code>cucumber</code>这个命令</li>
<li>构建脚本，选择Execute shell，内容如下，请根据需要自行修改</li>
</ul>


<p><code>
cd $WORKSPACE
/usr/local/bin/xctool -workspace integration_test.xcworkspace -scheme integration_test-cal -sdk iphonesimulator7.1 clean build
mkdir -p test-reports
cucumber --format json -o test-reports/cucumber.json
</code></p>

<ul>
<li>构建后的操作，选择Publish Cucumber test result report，指定报告的目录<code>test-reports/cucumber.json</code></li>
</ul>


<p>之后点击应用，即完成了配置<br/>
<img src="/images/%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E5%AE%8C%E6%AF%95.png" alt="项目创建完毕" /></p>

<h3>立即构建</h3>

<p>还在等什么？马上点击立即构建吧。。。<br/>
<img src="/images/%E7%AB%8B%E5%8D%B3%E6%9E%84%E5%BB%BA.png" alt="立即构建" /></p>

<p>等待构建的过程中，我们可以查看控制台输出<br/>
<img src="/images/%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA.png" alt="控制台输出" /></p>

<p><em>模拟器也会在中途弹出，然后自动关闭</em></p>

<p>构建结束后，我们可以看到构建结果<br/>
<img src="/images/%E6%9E%84%E5%BB%BA%E7%BB%93%E6%9E%9C.png" alt="构建结果" /></p>

<p>结果展示了变更、由谁触发的构建和测试报告，更多的信息大家可以自行挖掘。总之构建是完成了。</p>

<p>想要进行持续构建，需要设置成每个一段时间自动构建，在Build periodically中配置即可。</p>

<h3>下一步该做什么？</h3>

<p>在淌通了这一整套流程之后，其实还是有很多事情等着我们来做的，下面是几个例子：</p>

<ol>
<li>为Jenkins创建用户管理</li>
<li>修改脚本，自动存放ipa并上传到特定服务器</li>
<li>配置构建策略，每日1次，或者多次，或者监听git变化，有上传就构建</li>
<li>配置邮件策略，使大家及时获得反馈</li>
</ol>


<p>总之，拥抱集成测试吧。</p>
]]></content>
  </entry>
  
</feed>
