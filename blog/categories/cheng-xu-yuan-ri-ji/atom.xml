<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 程序员日记 | 臧成威的博客]]></title>
  <link href="http://williamzang.com/blog/categories/cheng-xu-yuan-ri-ji/atom.xml" rel="self"/>
  <link href="http://williamzang.com/"/>
  <updated>2014-08-27T17:37:08+08:00</updated>
  <id>http://williamzang.com/</id>
  <author>
    <name><![CDATA[臧成威]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[工具链]]></title>
    <link href="http://williamzang.com/blog/2014/08/27/gong-ju-lian/"/>
    <updated>2014-08-27T17:27:45+08:00</updated>
    <id>http://williamzang.com/blog/2014/08/27/gong-ju-lian</id>
    <content type="html"><![CDATA[<p>每一个老开发者，都有很中意的一些工具，对于新的开发者来说，应该是一个很好的指引。我虽然不算什么老开发者，但是也有一定的心得。所以今天就分享一下我对于iOS所用到的工具吧。</p>

<p>最先介绍的是Mac下开发相关的App：</p>

<ol>
<li>同步助手&mdash;&mdash;&mdash;-iPhone同步</li>
<li>AirServer&mdash;&mdash;-用于将苹果设备投射到Mac屏幕上</li>
<li>Alfred 2&mdash;&mdash;&mdash;好用的全局快捷菜单，比较爱用它当计算器</li>
<li>Android File Transfer&mdash;&mdash;Android同步，偶尔需要用到</li>
<li>BetterZip&mdash;&mdash;-压缩解压</li>
<li>Genymotion&mdash;&mdash;-Android虚拟机，用来对比Android效果</li>
<li>iTerm&mdash;&mdash;-终端的最佳替换</li>
<li>MarkMan&mdash;&mdash;&mdash;量图工具（Adobe Air环境）</li>
<li>Mou &mdash;&mdash;&mdash;Markdown编辑工具，正在用</li>
<li>PaintCode&mdash;&mdash;&mdash;OS X、iOS控件自绘工具</li>
<li>plistedit pro&mdash;&mdash;-plist编辑工具</li>
<li>Reveal&mdash;&mdash;&mdash;iOS视图调试工具</li>
<li>Simpholders&mdash;&mdash;&mdash;iOS模拟器应用目录快速查询</li>
<li>Source Tree&mdash;&mdash;-Git客户端</li>
<li>TextMate&mdash;&mdash;-文本编辑</li>
<li>VirtualBox&mdash;&mdash;-虚拟机 用作Genymotion支持</li>
<li>LICEcap&mdash;&mdash;&mdash;&mdash;Git录屏软件，用来跟别人解释发生了什么</li>
<li>Docs for Xcode&mdash;&mdash;-一些开源项目的文档集成</li>
<li>Charles&mdash;&mdash;&mdash;-用来调试网络情况和Hook客户端调用结果的</li>
</ol>


<p>然后是命令行工具：</p>

<ol>
<li>Homebrew&mdash;&mdash;-一切都靠他了</li>
<li>RVM&mdash;&mdash;-Ruby版本管理工具</li>
<li>CocoaPods&mdash;&mdash;iOS、OS X包管理器</li>
<li>Oh-my-zsh&mdash;&mdash;&mdash;漂亮的Zsh shell</li>
<li>xctool&mdash;&mdash;自动化集成</li>
<li>vim&mdash;&mdash;-文本编辑器</li>
<li>calabash&mdash;&mdash;-集成、UI测试工具</li>
</ol>


<p>Xcode的插件：</p>

<ol>
<li>Alcatraz&mdash;&mdash;插件管理器，其他的都靠它了</li>
<li>AdjustFontSize&mdash;&mdash;-文本快速放大缩小</li>
<li>FuzzyAutocomplete&mdash;&mdash;&mdash;补全工具，不过这个一开，有点补全太多了</li>
<li>HOStringSense&mdash;&mdash;-NSString的长度测量，文本编码</li>
<li>KSImageNamed&mdash;&mdash;[UIImage imageNamed]的时候，自动出现图片选择</li>
<li>Lin&mdash;&mdash;&mdash;-NSLocalizedString的快速增删改查
7.OMColorSense&mdash;&mdash;&mdash;颜色插件</li>
<li>QuickLocalization&mdash;&mdash;-NSLocalizedString快速生成</li>
<li>RevealPlugin&mdash;&mdash;-快速打开Reveal</li>
<li>Singleton&mdash;&mdash;单例源代码模板</li>
<li>Specta&mdash;&mdash;-specta测试代码模板</li>
<li>VVDocumenter-Xcode&mdash;&mdash;&mdash;&mdash;-代码注释生成器</li>
<li>XVim&mdash;&mdash;&mdash;Xcode的Vim支持</li>
</ol>


<p>最后是我在iOS中喜欢用的库：</p>

<ol>
<li>ReactiveCocoa&mdash;&mdash;&mdash;-著名的RAC框架</li>
<li>ReactiveViewModel&mdash;&mdash;&mdash;RAC支持MVVM的辅助类</li>
<li>libextobjc&mdash;&mdash;-OC运行时扩展</li>
<li>WYPopoverController&mdash;&mdash;iPhone的Popover弹出框</li>
<li>pop&mdash;&mdash;-Facebook的动画库</li>
<li>MBProgressHUD&mdash;&mdash;HUD弹出信息</li>
<li>PinYin4Objc&mdash;&mdash;反解拼音库</li>
<li>MNCalendarView@aceontech&mdash;&mdash;日历</li>
<li>MTDates&mdash;&mdash;NSDate的N多扩展</li>
<li>Mantle&mdash;&mdash;好的简易Model</li>
<li>SDWebImage&mdash;&mdash;-图片缓存</li>
<li>XHImageViewer&mdash;&mdash;图片浏览器，挺多bug，有空给改改</li>
<li>UI7Kit&mdash;&mdash;iOS5 iOS6的iOS7扁平化界面快速替换，注意有坑</li>
<li>AFNetworking&mdash;&mdash;&mdash;网络库</li>
<li>Tweaks&mdash;&mdash;&mdash;Facebook的调试工具，晃一晃微调参数</li>
<li>UALogger&mdash;&mdash;-Log工具</li>
<li>Calabash&mdash;&mdash;-自动化测试工具</li>
<li>Nocilla&mdash;&mdash;网络模拟工具</li>
<li>Reveal-iOS-SDK&mdash;&mdash;-视图调试工具</li>
<li>Expecta&mdash;&mdash;-单元测试断言宏</li>
<li>Specta&mdash;&mdash;单元测试的DSL</li>
<li>OCMock&mdash;&mdash;&mdash;OC的Mock测试工具</li>
<li>MagicalRecord&mdash;&mdash;&mdash;CoreData高级辅助工具</li>
<li>FastAnimationWithPOP&mdash;&mdash;&mdash;我自己写的动画库</li>
</ol>


<p>希望能对大家有所帮助，也欢迎和我交流。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014-8-18 周一 晴]]></title>
    <link href="http://williamzang.com/blog/2014/08/18/2014-8-18-zhou-yi-qing/"/>
    <updated>2014-08-18T11:28:38+08:00</updated>
    <id>http://williamzang.com/blog/2014/08/18/2014-8-18-zhou-yi-qing</id>
    <content type="html"><![CDATA[<p>今天就提一提升级的问题，仅是个人想法。</p>

<p>国内做app的公司，大都有一个特点，就是iOS的版本支持，都比较全面，支持iOS4以上的应用颇为普遍。广大的开发商认为这样可以让目前所有的用户都可以享用到自己的产品，广大的用户认为这样就可以用自己老的产品既不升级硬件，也不升级软件。其实在我看来，长久下去，是对大家都没有好处的。</p>

<p>大家都对某些东西的升级很感兴趣，而且有不给升级就恼怒的情况。这些升级是什么呢？比如职位的升级，工资的升级，职称的升级，家庭地位的升级。可见升级一直都是一个大家比较喜欢和向往的词儿。但是唯独到了软件的升级，就变成了一种痛苦。我们来听一听：</p>

<blockquote><p>iOS 8要来了，我们又得适配新的分辨率了<br/>
API又变了这么多，不晓得又有多少BUG<br/>
什么？这个应用要iOS7以上才可以装，真是个垃圾应用，老子不鸟它<br/>
大家都用上iOS7了，怎么升级啊，不会呢<br/>
为什么要升级，现在用的不是挺好的么<br/>
苹果开始审核不兼容iPhone5的分辨率就不让通过了</p></blockquote>

<p>其实，就单纯iOS来说，用户升级的软件成本已经越来越低了，OTA升级几乎让绝大多数的小白用户都可以在不明觉厉的情况下体验到新的版本。（<em>当然OTA升级后，系统实际上由于垃圾过多速度会稍稍拖慢</em>），那为什么还有那么多人不升级呢？原因有这几个</p>

<ol>
<li>很多程序都是兼容的，不升级也可以用新的</li>
<li>新的系统有BUG，还是等一等稳定的吧（这一等也许就等到你的设备退休）</li>
<li>喜欢老的界面，不喜欢变化</li>
<li>从来不关注这些，有升级提示也不看</li>
</ol>


<p>我们来一个一个分析一下，首先是兼容的问题。这是头等大事，因为软件可以用，当然不需要升级。试想一下，极端情况，如果所有的软件都是只支持最新版，你的iOS6毛应用都装不上，除了把它卖了，就只好升级了。当然这有点太激进，但是也是一种现象。软件的兼容反而是阻碍大家升级的主要原因。反过来看软件的兼容带来什么其他的麻烦了呢？作为开发者，你会发现这些现象：</p>

<ol>
<li>有新的API和开发方法了，不过这个不支持iOS 4，还是别看了</li>
<li>哦，这个API已经不能用了，那我们加个if(response)-else吧</li>
<li>XCode新版已经不支持编译了？我们得想办法装上旧版</li>
</ol>


<p>对于老的公司来说，有旧的版本的程序倒还好做兼容，只是在老的代码上缝缝补补，又可以穿个几年。但是对于新的公司来说，明明一个新的产品，却套上了旧的衣衫，拖慢了开发效率和执行效率不说，软件的“逼格”似乎也拉低了？什么？开发效率？是的，其实苹果每次发布新版iOS，都从API上做了很大的改进，目的当然不是为了让大家更麻烦，而是让大家更灵活的支持定制和拥有更简单的实现方式。Storyboard、Autolayout、包括最新的Size Classes。无一不是为了开发者而搞出来的，大家之所以那么抵触，实际上是因为浮躁和懒惰。浮躁在不愿意仔细了解，一旦发现问题和难点，就马上批判。懒惰在不想学习和研究新的变化，而懒惰的人更喜欢找借口。</p>

<p>往往见到的就是很多人，揪着新技术的一个小小的缺点，然后把它贬低的一无是处。如果是另外一个开发者因为你的一个bug，把你贬低的一无是处，你非气炸了不可。但是很多人就是这样对待新的API和工具的。一张漂漂亮亮的画作上，滴了墨水，很多人都会关注那瑕疵，遍不会好好看那画作了。其实大家静下心来，好好学习一下新的知识，你会发现，它真的可以帮助你好多。</p>

<p>关于新的系统的bug的问题，和上段刚提到的，是一样的，大家缺少包容，通常会对瑕疵有着格外的在意。大家在生活上或多或少都有着这样的感觉，就是你明明做得很辛苦，但是因为一件小事，被人抓到，然后仿佛你所有的努力都没有了。一份90分的卷纸，很少人在乎你做对了90分的题，掌握了90分的知识，只是看到你做错了10分的题，没有掌握或者马虎了10分的知识点。己所不欲，勿施于人。我们都希望世界可以更公平的对待每一个人，也都希望自己的努力可以得到重视，那么我们就不应该这样对待别人，对待新的，很多人努力的成果，不是批判它的瑕疵，而是体验它带来的便利。</p>

<p>喜欢老的界面这个问题，到是可以理解，萝卜白菜各有所爱，很多人在iOS6升7的时候，都有着不适应，似乎在Win7升8的时候更为强烈。主要还是一个习惯问题，我不觉得喜欢一种风格是值得抨击的。但是为了可以提供更好，更优质的软件，我还是喜欢用新的东西来创造。而且，我觉得，如果新的东西做得好起来，还是会让很多人有所改观，相信现在，很多人也已经接受扁平化的iOS7的风格了。</p>

<p>至于不关注的升级的人，其实很多也不关注软件的，所以开发者为了这个理由不升级，就更没有必要了不是么。</p>

<p>再来说说硬件成本，苹果的软件升级，对于较新的设备，是免费的，这点比微软要好，我们总是可以在不花钱的情况下领略新系统带来的便利。然后这总会在你的设备足够老的时候还回去，一旦你开始喜欢上新的系统，发现你不恩能再升级了，就会敦促你买一个新的设备了。苹果也可以那样长久下去。而苹果的长青，也关乎着千千万万的iOS开发者的腰包。所以，顺应潮流，大家都用新的系统来支持，广大的用户就会踊跃升级，也踊跃换新机，大家的开发也就又简单（因为用新的系统和API，减少兼容的代码）又赚得多了。</p>

<p>总之，面向新的时代，我们越能顺应潮流，就越快乐。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014-8-15 周五 多云]]></title>
    <link href="http://williamzang.com/blog/2014/08/15/2014-8-15-zhou-wu-duo-yun/"/>
    <updated>2014-08-15T10:53:40+08:00</updated>
    <id>http://williamzang.com/blog/2014/08/15/2014-8-15-zhou-wu-duo-yun</id>
    <content type="html"><![CDATA[<p>巧用Objc的动态特性，会使你的工作变得有趣并且减少很多未来的工作量。以前也在论坛里提及过Objc的一些动态特性，当时就有很多朋友讲到，单纯知道这些特性，但是不知道如何应用。那么，今天就把我可以想到的几个小例子分享一下。</p>

<p>很多时候，你的代码会变得极其相似。但是又有略微不同，这时你就会想，如果我可以把不同的部分分离出来该多好，但是往往事与愿违。你仍会发现很多的透传代码挡在你的面前，就算不停的优化，接口还是要一个一个导过去。</p>

<p>&#8220;`objective-c
// 类OrdersViewModel
&ndash; (BOOL)hasOrder
{</p>

<pre><code>return internalOrderManager.hasOrder;
</code></pre>

<p>}</p>

<ul>
<li><p>(NSInteger)orderCount
{
  return internalOrderManager.orderCount;
}</p></li>
<li><p>(NSString *)orderNameForIndex:(NSInteger)index
{
  return [internalOrderManager orderNameForIndex:index];
}</p></li>
</ul>


<p>// 以下略很多的透传
&#8220;`</p>

<p>这样的封装很好的接口，却因为很多的透传让代码变得臃肿不堪。还存在一些后续维护的问题，当internalOrderManager的接口变化的时候，还需要记得把外面OrdersViewModel这个类也一起变了。</p>

<p>这时就是动态特性大显身手的时候了，如果我们不实现这些方法，运行时会调用一系列的方法来寻求解决方案，这个例子里，最简单的方法就是<code>- (id)forwardingTargetForSelector:(SEL)aSelector</code>，也被称为快速转发，下面是实现。</p>

<p>&#8220;`objective-c
// 类OrdersViewModel
&ndash; (id)forwardingTargetForSelector:(SEL)aSelector
{</p>

<pre><code>if ([self.internalOrderManager respondsToSelector:aSelector]) {
    return self.internalOrderManager;
}
return nil;
</code></pre>

<p>}
&#8220;`</p>

<p><em>这只是本人的一个日记而已，所以相关技术点请大家去Google一下吧。</em></p>

<p>这么做之后，发现了一个小问题，就是类OrdersViewModel由于没有实现<code>hasOrder</code>,<code>orderCount</code>和<code>orderNameForIndex:</code>这三个方法所以有了Warning。消除的方法就是使用类别</p>

<p>&#8220;`objective-c
@interface OrdersViewModel(Extended)
&ndash; (BOOL)hasOrder;
&ndash; (NSInteger)orderCount;
&ndash; (NSString *)orderNameForIndex:(NSInteger)index;
@end</p>

<p>&#8220;`</p>

<p>这样就好了。</p>

<p>然而很多时候，没有这么乐观和简单，例如下面的例子：</p>

<p>&#8220;`objective-c
// 类OrdersViewModel
&ndash; (NSString *)orderNameForIndex:(NSInteger)index
{</p>

<pre><code>return [self.orders[index] name];
</code></pre>

<p>}</p>

<ul>
<li>(CGFloat)orderPriceForIndex:(NSInteger)index
{
  return [self.orders[index] price];
}</li>
<li>(NSString *)orderDescForIndex:(NSInteger)index
{
  return [self.orders[index] desc];
}</li>
<li>(void)orderIncreasePrice:(NSNumber *)value forIndex:(NSInteger)index
{
  [self.orders[index] increasePrice:value];
}
// 以下略更多的透传</li>
</ul>


<p>&#8220;`</p>

<p>这个看起来，又是如此的相似，但是老办法却搞不定，难道我们注定就要透传和维护下去么？当然不是的。</p>

<p>除了快速转发，还有标准消息转发，不过想要实现，还是需要费一番周章的。</p>

<p>所谓的标准转发，就是实现<code>- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</code>和<code>- (void)forwardInvocation:(NSInvocation *)anInvocation</code>这两个方法进行转发。</p>

<p><code>NSMethodSignature</code>是方法签名，为什么要有这个腻？那是因为selector其实只是一个字符串，从它并不能知道参数的类型和返回值的类型，而方法签名实际上是用来描述参数的类型和返回值的类型的。也就是说，相同的返回值与参数的所有selector的签名其实是一致的。而Objc运行时要根据对象返回的这个签名来抓取参数，然后才会调用<code>- (void)forwardInvocation:(NSInvocation *)anInvocation</code>这个方法。</p>

<p><code>NSInvocation</code>这个类，和我们平常用的<code>- (id)performSelector:(SEL)aSelector withObject:(id)object</code>的有相同的作用，不过更为多元化，可以管理参数和返回值。</p>

<p>首先来实现<code>- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</code>这个方法</p>

<p>&#8220;`objective-c
&ndash; (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector
{</p>

<pre><code>NSMethodSignature* signature = nil;

NSString *selectorName = NSStringFromSelector(aSelector);

if ([self selectorNameCheck:selectorName] ) {
    signature = [self targetMethodSignature:selectorName];
}

return signature;
</code></pre>

<p>}</p>

<ul>
<li><p>(BOOL)selectorNameCheck:(NSString <em>)selectorName
{
  NSPredicate </em>predicate = [NSPredicate predicateWithFormat:@&ldquo;SELF BEGINSWITH &lsquo;order&rsquo; AND (SELF ENDSWITH &lsquo;forIndex:&rsquo; OR SELF ENDSWITH &lsquo;ForIndex:&rsquo;)&rdquo;];
  return [predicate evaluateWithObject:selectorName];
}</p></li>
<li><p>(NSMethodSignature <em>)targetMethodSignature:(NSString </em>)selectorName
{
  return [Order instanceMethodSignatureForSelector:[self targetSelector:selectorName]];
}</p></li>
<li>(SEL)targetSelector:(NSString <em>)selectorName
{
  NSMutableString </em>newSelectorName = [selectorName mutableCopy];
  [newSelectorName deleteCharactersInRange:[selectorName rangeOfString:@&ldquo;forIndex:&rdquo; options:NSCaseInsensitiveSearch|NSBackwardsSearch]];
  [newSelectorName deleteCharactersInRange:[@&ldquo;order&rdquo; rangeOfString:className options:NSCaseInsensitiveSearch]];
  return NSSelectorFromString(newSelectorName.uncapitalizedString); // uncapitalizedString是我通过类别加的新方法，就是把首字母小写，大家试的时候，随便实现以下就可以了。
}
&#8220;`</li>
</ul>


<p>大功告成，我们先用Predicate匹配了是否以order开头，以forIndex或者ForIndex结尾，然后还把order和forIndex去掉，得到了正确的selector，并取得了新的signature。然后是调用部分。</p>

<p>&#8220;`objective-c
&ndash; (void)forwardInvocation:(NSInvocation *)anInvocation
{</p>

<pre><code>SEL seletor = [anInvocation selector];
NSString *selectorName = NSStringFromSelector(seletor);
if ([self selectorNameCheck:selectorName] ) {
    NSUInteger argCount = [anInvocation methodSignature].numberOfArguments;
    NSInteger index = -1;
    [anInvocation getArgument:&amp;index atIndex:argCount - 1];

    id instance = self.orders[index];

    NSMethodSignature *newSignature = [self targetMethodSignature:selectorName];
    NSInvocation *newInvocation = [NSInvocation invocationWithMethodSignature:newSignature];
    newInvocation.selector = [self targetSelector:selectorName];
    for (int i = 2; i &lt; argCount - 1; ++i) {
         NSObject *obj = nil;
         [anInvocation getArgument:&amp;obj atIndex:i];
         [newInvocation setArgument:&amp;obj atIndex:i];
     }
     [newInvocation invokeWithTarget:instance];
     if (strcmp(newSignature.methodReturnType, "@") == 0) {
         NSObject *returnValue = nil;
         [newInvocation getReturnValue:&amp;returnValue];
         [anInvocation setReturnValue:&amp;returnValue];
     }

    }
}
</code></pre>

<p>}
&#8220;`</p>

<p>调用的时候，先取得参数的个数，然后get最后一个参数，我们知道这个参数就是index，然后取得instance。并生成新的invocation，传递参数，传递返回值。一切看起都那么美好。<strong>但是，它是不工作的。</strong></p>

<p>如果你跑一遍就会发现了，argCount是不对的，就算强制改对，你也会发现index取不回来。这是为什么呢？原因就出在<code>- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</code>的实现上。刚才说了，<strong>Objc运行时要根据对象返回的这个签名来抓取参数</strong>，我们返回的签名，显然没有最后一个参数，所以invocation生成的时候，就没传过来，自然不会生效。可是要怎么解决呢？</p>

<p>这里有一个难题，就是我们需要找到正确的签名，而参数的个数又是不确定的。我用了一个折中的办法，生成了许多假的方法，涵盖了许多的签名。</p>

<p>&#8220;`objective-c
&ndash; (void)voidMethodforIndex:(NSInteger)index {}
&ndash; (void)voidMethodParam:(id)<em>0 forIndex:(NSInteger)index {}
&ndash; (void)voidMethodParam:(id)</em>0 Param:(id)<em>1 forIndex:(NSInteger)index {}
&ndash; (void)voidMethodParam:(id)</em>0 Param:(id)<em>1 Param:(id)</em>2 forIndex:(NSInteger)index {}
&ndash; (void)voidMethodParam:(id)<em>0 Param:(id)</em>1 Param:(id)<em>2 Param:(id)</em>3 forIndex:(NSInteger)index {}
&ndash; (void)voidMethodParam:(id)<em>0 Param:(id)</em>1 Param:(id)<em>2 Param:(id)</em>3 Param:(id)<em>4 forIndex:(NSInteger)index {}
&ndash; (void)voidMethodParam:(id)</em>0 Param:(id)<em>1 Param:(id)</em>2 Param:(id)<em>3 Param:(id)</em>4 Param:(id)<em>5 forIndex:(NSInteger)index {}
&ndash; (void)voidMethodParam:(id)</em>0 Param:(id)<em>1 Param:(id)</em>2 Param:(id)<em>3 Param:(id)</em>4 Param:(id)<em>5 Param:(id)</em>6 forIndex:(NSInteger)index {}
&ndash; (void)voidMethodParam:(id)<em>0 Param:(id)</em>1 Param:(id)<em>2 Param:(id)</em>3 Param:(id)<em>4 Param:(id)</em>5 Param:(id)<em>6 Param:(id)</em>7 forIndex:(NSInteger)index {}
&ndash; (void)voidMethodParam:(id)<em>0 Param:(id)</em>1 Param:(id)<em>2 Param:(id)</em>3 Param:(id)<em>4 Param:(id)</em>5 Param:(id)<em>6 Param:(id)</em>7 Param:(id)<em>8 forIndex:(NSInteger)index {}
&ndash; (void)voidMethodParam:(id)</em>0 Param:(id)<em>1 Param:(id)</em>2 Param:(id)<em>3 Param:(id)</em>4 Param:(id)<em>5 Param:(id)</em>6 Param:(id)<em>7 Param:(id)</em>8 Param:(id)<em>9 forIndex:(NSInteger)index {}
&ndash; (void)voidMethodParam:(id)</em>0 Param:(id)<em>1 Param:(id)</em>2 Param:(id)<em>3 Param:(id)</em>4 Param:(id)<em>5 Param:(id)</em>6 Param:(id)<em>7 Param:(id)</em>8 Param:(id)<em>9 Param:(id)</em>10 forIndex:(NSInteger)index {}</p>

<ul>
<li>(id)idMethodforIndex:(NSInteger)index { return nil;}</li>
<li>(id)idMethodParam:(id)_0 forIndex:(NSInteger)index { return nil;}</li>
<li>(id)idMethodParam:(id)<em>0 Param:(id)</em>1 forIndex:(NSInteger)index { return nil;}</li>
<li>(id)idMethodParam:(id)<em>0 Param:(id)</em>1 Param:(id)_2 forIndex:(NSInteger)index { return nil;}</li>
<li>(id)idMethodParam:(id)<em>0 Param:(id)</em>1 Param:(id)<em>2 Param:(id)</em>3 forIndex:(NSInteger)index { return nil;}</li>
<li>(id)idMethodParam:(id)<em>0 Param:(id)</em>1 Param:(id)<em>2 Param:(id)</em>3 Param:(id)_4 forIndex:(NSInteger)index { return nil;}</li>
<li>(id)idMethodParam:(id)<em>0 Param:(id)</em>1 Param:(id)<em>2 Param:(id)</em>3 Param:(id)<em>4 Param:(id)</em>5 forIndex:(NSInteger)index { return nil;}</li>
<li>(id)idMethodParam:(id)<em>0 Param:(id)</em>1 Param:(id)<em>2 Param:(id)</em>3 Param:(id)<em>4 Param:(id)</em>5 Param:(id)_6 forIndex:(NSInteger)index { return nil;}</li>
<li>(id)idMethodParam:(id)<em>0 Param:(id)</em>1 Param:(id)<em>2 Param:(id)</em>3 Param:(id)<em>4 Param:(id)</em>5 Param:(id)<em>6 Param:(id)</em>7 forIndex:(NSInteger)index { return nil;}</li>
<li>(id)idMethodParam:(id)<em>0 Param:(id)</em>1 Param:(id)<em>2 Param:(id)</em>3 Param:(id)<em>4 Param:(id)</em>5 Param:(id)<em>6 Param:(id)</em>7 Param:(id)_8 forIndex:(NSInteger)index { return nil;}</li>
<li>(id)idMethodParam:(id)<em>0 Param:(id)</em>1 Param:(id)<em>2 Param:(id)</em>3 Param:(id)<em>4 Param:(id)</em>5 Param:(id)<em>6 Param:(id)</em>7 Param:(id)<em>8 Param:(id)</em>9 forIndex:(NSInteger)index { return nil;}</li>
<li>(id)idMethodParam:(id)<em>0 Param:(id)</em>1 Param:(id)<em>2 Param:(id)</em>3 Param:(id)<em>4 Param:(id)</em>5 Param:(id)<em>6 Param:(id)</em>7 Param:(id)<em>8 Param:(id)</em>9 Param:(id)_10 forIndex:(NSInteger)index { return nil;}</li>
</ul>


<p>&#8220;`</p>

<p>看起来好眼晕的说，哈哈。这种方法在C++的模板里也有类似的应用，就是预生成一些内容，考虑一个假定临界值，把所有的可能写出来。有了这些我们就可以这样修改<code>- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</code>这个方法了。</p>

<p>&#8220;`objective-c
&ndash; (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector
{</p>

<pre><code>NSMethodSignature* signature = nil;

NSString *selectorName = NSStringFromSelector(aSelector);

if ([self selectorNameCheck:selectorName] ) {
    signature = [self targetMethodSignature:selectorName];
    if (signature != nil) {
        int argCount = signature.numberOfArguments;
        NSMutableString *selfSelectorName = nil;
        NSUInteger insertLoc = 0;
        if (strcmp(signature.methodReturnType, "v") == 0) {
            selfSelectorName = @"voidMethodforIndex:".mutableCopy;
            insertLoc = 10;
        } else if (strcmp(signature.methodReturnType, "@") == 0) {
            selfSelectorName = @"idMethodforIndex:".mutableCopy;
            insertLoc = 8;
        } else {
            NSAssert(NO, @"Class %@ method %@ return a value neither void or id", NSStringFromClass(self.proxyClass), selectorName);
        }
        for (int i = 2; i &lt; argCount; ++i) {
            [selfSelectorName insertString:@"Param:" atIndex:insertLoc];
        }
        signature = [self.class instanceMethodSignatureForSelector:NSSelectorFromString(selfSelectorName)];
    }
}

return signature;
</code></pre>

<p>}
&#8220;`</p>

<p>拿到正确的signature之后，我们根据返回值的类型和参数的个数，生成一个selector的字符串，并根据这个得到新的signature。至此，这个改造总算完成了。我们的新的方法可以不用修改代码而实现了。</p>

<p>这时，可能你就会问了，这样搞起来，不是比原来的代码还多了么？事实确实如此，但是我们用这个应付了以后的种种变化。经过合理的封装，不难得到一个可以复用的例子，我也打算开一个新的开源项目<a href="https://github.com/WilliamZang/ZFastProxy">ZFastProxy</a>，把可复用的组件分享出去。</p>

<p>很多时候，用动态特性可以让代码变得“神奇”起来，它更加的智能，也让你的开发变得越来越有趣，因为我们是为了未来而开发，而不是当下。以一种以不变应万变的思维来做事是快乐的，它同时也锻炼我们更高层次的抽象和提高了我们开发的技巧。</p>

<p>希望我的例子可以起到抛砖引玉的作用，让更多的人创造出更好的可复用组件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014-8-14 周四 晴]]></title>
    <link href="http://williamzang.com/blog/2014/08/14/2014-8-14-zhou-si-qing/"/>
    <updated>2014-08-14T11:24:34+08:00</updated>
    <id>http://williamzang.com/blog/2014/08/14/2014-8-14-zhou-si-qing</id>
    <content type="html"><![CDATA[<p>每天思绪万千，不停涌入的想法，总需要收集起来，所以，打算从今天开始，写日记。没错，程序员日记，记录每天思绪的点点滴滴，说不定某一天就能用到了，呵呵。</p>

<p>设计模式在程序员的耳中也算耳熟能详了，今天一早刷新Github的时候，发现onevcat start了一个叫做<a href="https://github.com/ochococo/Design-Patterns-In-Swift">ochococo/Design-Patterns-In-Swift</a>的项目，勾起了我对设计模式的感慨。</p>

<p>虽说如此的如雷贯耳，但是真正用的好的，并且不滥用的还是少数。绝大多说的程序员们还是处于邯郸学步的状态，在未领会设计原则的状态下，把设计模式生搬硬套上的不是少数。</p>

<p>昨天看的CSDN咨询上《<a href="http://www.csdn.net/article/2014-08-13/2821174-Bruce-lee-was-a-Programmer">假如李小龙是程序员……</a>》也提到过</p>

<blockquote><p>“所有固定的模式都是缺乏适应性和塑造性的。这是固定模式的死穴。”<br/>
注解：没有所谓的秘诀银弹。没有绝对的设计模式。每样事物都有其自身特点。</p></blockquote>

<p>所以以无法为有法，以无形为有形，才能让设计模式在你的设计中起到重要的作用。</p>
]]></content>
  </entry>
  
</feed>
