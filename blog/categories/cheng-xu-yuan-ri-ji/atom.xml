<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 程序员日记 | 臧成威的博客]]></title>
  <link href="http://williamzang.com/blog/categories/cheng-xu-yuan-ri-ji/atom.xml" rel="self"/>
  <link href="http://williamzang.com/"/>
  <updated>2016-06-27T11:16:04+08:00</updated>
  <id>http://williamzang.com/</id>
  <author>
    <name><![CDATA[臧成威]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[从另一个角度介绍下Block]]></title>
    <link href="http://williamzang.com/blog/2014/09/09/cong-ling-yi-ge-jiao-du-jie-shao-xia-block/"/>
    <updated>2014-09-09T10:27:24+08:00</updated>
    <id>http://williamzang.com/blog/2014/09/09/cong-ling-yi-ge-jiao-du-jie-shao-xia-block</id>
    <content type="html"><![CDATA[<p>群里有个小伙伴问我block的理解，我想网上那么多blog都写过iOS的block的介绍，说明，用法，如果还是不能理解，那就换个角度吧。所以，今天我们来聊一聊Block的前世今生，不谈block如何定义，不谈block有哪些坑，只谈它是怎么来的。</p>

<p>首先block的使用，真的不必多说，想必大家google后也都会用。问题就在于，为什么要有block？有人觉得block方便，到底方便在哪里呢？这一切要从函数指针这个很老的概念谈起了。</p>

<p>在C时代，面向过程一度成为程序开发的主流，在没有对象化的程序设计中，我们难免写出如下的程序：</p>

<pre><code class="c">extern const char *GetMenu0();
extern const char *GetMenu1();
extern const char *GetMenu2();
extern const char *GetMenu3();
extern const char *GetMenu4();
extern const char *GetMenu5();



const char *GetMenuShow(int pos) {
    switch (pos) {
        case 0: return GetMenu0();
        case 1: return GetMenu1();
        case 2: return GetMenu2();
        case 3: return GetMenu3();
        case 4: return GetMenu4();
        case 5: return GetMenu5();
        default:
            return NULL;
    }
}
</code></pre>

<p>随着程序的复杂度提高，这样的程序变得越来越长，这时函数指针可以来帮忙，于是函数就变成了这样：</p>

<pre><code class="c">extern const char *GetMenu0();
extern const char *GetMenu1();
extern const char *GetMenu2();
extern const char *GetMenu3();
extern const char *GetMenu4();
extern const char *GetMenu5();

typedef const char *(*MenuMethodType)();

static MenuMethodType g_methods[] = {
  &amp;GetMenu0,
  &amp;GetMenu1,
  &amp;GetMenu2,
  &amp;GetMenu3,
  &amp;GetMenu4,
  &amp;GetMenu5
};


const char *GetMenuShow(int pos) {
    if (pos &lt; 0 || pos &gt;= (sizeof(g_methods) / sizeof(MenuMethodType))) {
        return NULL;
    }
    return g_methods[pos]();
}
</code></pre>

<p>这种写法也叫做跳转表，好处是以后GetMenu*这种函数的增长可以放到GetMenuShow这个函数外，减少了耦合。函数指针的另一个妙用就是回调函数，这个非常的普遍，也不需要再举例子了。</p>

<p>函数指针给我们带来的新的开发思想，就是行为的变量化，因此，我们可以将不同的行为封装到统一的流程之外，作为可替换的组件。总之，它允许你把可变化的行为，注入到稳定的过程中，我们便获得了更好的扩展，把开发的中心放到变化而不是重复上。</p>

<p>到了OC时代，OC有了一种比函数指针还高效而简单的东西，那就是selector。这个被称为选择器的工具，不仅可以让我们得到函数指针的一切便利，还可以动态的替换其指向的内容。于是我们有了很多<code>addTarget:action:</code>这样的API，使得我们可以把行为注入到已经非常稳定的Cocoa或CocoaTouch框架中。</p>

<p>虽然有了一定的便利，但是程序员是不容易满足的。我们逐渐发现，这种基于action的写法有时很麻烦。主要是以下几点：</p>

<ol>
<li>就是很多时候，你注入的内容可能就一次，搞一个函数或者方法，浪费了不少的时间。</li>
<li>你还要起名字，要知道，Phil Karlton就说过:“在计算机科学领域,有两大难题,如何验证缓存和如何给各种东西命名。”</li>
<li>使得你原本可以在一个函数里实现的逻辑，分散到不同的部分，你难以专注的一次把你的逻辑写完。</li>
</ol>


<p>这时，我们的主角block就来帮助大家了。</p>

<p>其实block还有很多别名，其中一个就是匿名函数。利用block，你可以在一个函数中，写上一小段代码，不用起名字，就可以传递过去。函数指针的用法，几乎都可以用匿名函数来替换。一举解决了碎片化，命名等问题。我们便有了这样的代码：</p>

<pre><code class="objective-c">AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];
[manager GET:@"http://example.com/resources.json" parameters:nil success:^(AFHTTPRequestOperation *operation, id responseObject) {
    NSLog(@"JSON: %@", responseObject);
} failure:^(AFHTTPRequestOperation *operation, NSError *error) {
    NSLog(@"Error: %@", error);
}];
</code></pre>

<p>贪婪的程序员不仅仅满足于少起个名字和把代码写到一起，一旦程序员们发现，把一个函数写在另一个函数里很爽，就开始频繁的尝试。这时，又发现了几个小问题（以下仅是匿名函数的问题，block解决了这些问题）：</p>

<ol>
<li>匿名函数，到底还是一个函数，这个括号外面世界的变量，是不可以在里面使用的。</li>
<li>由于只能传递一个函数，我们就没有了可操作的对象（即没有了self）。</li>
</ol>


<p>其实这两个是一样的问题，都是因为没有变量的传递。如果可以把self传递下来，第二个问题也解决了。</p>

<p>想要解决这个问题，最简单的方法就是搞到全局域，于是代码就写成了这样：</p>

<pre><code class="objective-c">static int g_sum = 0;

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    g_sum = 0;
    [@[@1, @2, @3] enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
        int val = [obj intValue];
        g_sum += val;
    }];
    NSLog(@"sum = %d", g_sum);

    // Override point for customization after application launch.
    return YES;
}
</code></pre>

<p>把想要在匿名函数中的部分先存到全局变量，然后再到匿名函数中取出来。我们原本想解决的碎片化问题，又回来了。这样情况下，我们不得不搞出好多的全局变量，给全局变量起名字的问题也回来了。聪明的工程师们很快发现了，这种传递有着很规律的行为，于是把这些行为封装起来，做成库。这种手段叫做“闭包”，block的又一个名字。</p>

<p>把外面的对象，包在匿名函数中，封装起来，以备不时之需。OC利用编译器，在静态检查的时候，把用到的外部变量，都封装到block中。</p>

<p>这使得匿名函数，有了新的活力。在大量的尝试后，发现这简直就是一种神奇，闭包不单使得你的逻辑更加的紧凑，还使得开发变得越来越有趣。nodejs尝试用大量的闭包铸成了一种单线程异步的神奇的库。ReactiveCocoa也用block改变了大家开发iOS的思路。</p>

<p>有了block，我们可以更好的把变化抽取出来，可以更专注的实现逻辑，将异步的，碎片化的需求，快速的整合到一起。相比这些优点，block稍许复杂的语法，和一些可能出现的问题，是可以被原谅的。swift中，我们看到更多的闭包，可以看出block的写法对于开发有着多么深远的影响。</p>

<p>此篇只是一个引子，block有很多需要学习的地方，用好容易，用得精巧，还需要大家更多的开阔思维。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于一个小问题引发的感慨]]></title>
    <link href="http://williamzang.com/blog/2014/09/05/guan-yu-yi-ge-xiao-wen-ti-yin-fa-de-gan-kai/"/>
    <updated>2014-09-05T16:09:55+08:00</updated>
    <id>http://williamzang.com/blog/2014/09/05/guan-yu-yi-ge-xiao-wen-ti-yin-fa-de-gan-kai</id>
    <content type="html"><![CDATA[<p>首先先来看这样一个问题，大家在向后翻之前，先思考一下：</p>

<blockquote><p>现在有一本书，里面纸的颜色不同，现在让你想办法找出，这里面有多少种颜色，每种颜色多少张纸？</p></blockquote>

<p>这个小问题，我问过很多个人，我发现这个问题程序员回答的结果五花八门。我先来列举一下：</p>

<ol>
<li>将书看成数组，放到set里面，就可以知道有多少种颜色了，然后用两个for循环找出每个颜色有多少张</li>
<li>我没有懂这个问题，你再说明一下？</li>
<li>我想想啊~恩，要有个数组，来存颜色，不对，应该是个字典，用颜色做key，个数做value，然后……………………</li>
<li>………………不知道</li>
<li>额，好像我没有见过这样的例子啊。</li>
<li>这是数据结构的问题么？是问最优解么？我来想一想…………额……</li>
<li>首先写一个程序………………，然后……</li>
</ol>


<p>上面的回答都不大令人满意，下面的回答有趣很多：</p>

<ol>
<li>把书一页页扯下来，然后一样颜色的堆一起，最后查一查数</li>
<li>测一页纸的厚度，然后从书的侧面来测各个颜色的厚度</li>
<li>用个小本子记下出现的颜色，一页页翻过去，然后在颜色上画正字</li>
</ol>


<p>最后的答案应该说相当准确和简单了，它很好的解答了这个问题。可实施性很高，而复杂度很低。</p>

<p>大家有没有想过，为什么我们程序员在思考这个问题的时候，会这么复杂？那么我就来一一分析一下：</p>

<p>首先是回答不知道，或者半天没有憋出来的人，这种人不在少数。这类人的问题就是，老是把问题想的很复杂，面对这样的一个问题，老是觉得不够明确，没有开发环境，没有工具，没有API，还可以没有好多。所以无从下手，似乎解决问题就一定要有趁手API，有设备，有算法，有开发环境。当这些没有的时候，很多的程序员就解决不了问题。</p>

<p>然后再来说一说那些专门寻求最优解的人，这些人往往最后没有回答了问题，只是陷在求解的这样一个过程中。他们想建立更好的模型，具有更好的扩展性，却很少注意到问题的本质和场景。你可以做一个拾取颜色的机器人，然后计数，但是真的有必要么？很多时候，我们直观的解决问题就好了。等待问题扩大，再来想复用和扩展，不是更好么？</p>

<p>最后是这些，用set,字典给出答案的人，首先不能说他们是错的。但是，面对这样一个简单的问题，你真的有必要建立一个工程，写上几行代码来搞？而且，这要怎么实施呢？你的程序怎么把书当输入弄进去？程序员首先要学会思考，然后再编程，如果这样的问题，因为是我问的，就去找数据结构，找算法。并没有把解决问题放在首要，而是拘泥于已学的知识。</p>

<p>至于那些没有找到类似的例子，回去google和百度也没找到答案的同学，已经算是重度病症了。似乎开发的久了，很多程序员已经不会了独立思考，对他们来说，解决问题不过是google和百度，不过是找以前的例子。这到底是人类的进步，还是一种退化了呢？</p>

<p>那个测量厚度的回答，很有意思。这个答案完全没有提及程序，的确是分析之后的结果。但是有几点小问题，第一个问题就是，这个回答是不可实施的，因为没有办法很精确的测量纸的厚度，另外，纸的厚度也不尽相同。第二，这书如果是新的还好，中间空隙少，要是旧的呢，那不是测量出来的比实际多好多页么？第三，一切的假设都在同一颜色的页连在一起上，实际上题目中并没有说是连在一起啊，或者说，这个答案，解决不了随机颜色的问题。</p>

<p>这也侧面反映了我们程序员有时分析问题，不够全面，对可能的输入情况判断不全的缺点毛病。</p>

<p>那个把书撕下来是我问完这个问题，最先想到的答案，直观，简单。是因为我故意没有说这个书让不让破坏。可以在现有的条件下，用撕开书页来解决问题的，应该算另辟蹊径了。这不是一个标准答案，不过我还是觉得这样回答很有趣。</p>

<p>程序员是一群使用计算机来解决问题的人，大致可以分两种，一种是以知识来解决问题的，一种是以思维来解决问题的。而前者占大多数，这也让这个浮躁的IT圈蒙上了一层灰暗，这也是为什么公司甄选人才的时候，更看重经验、学历、背景公司的主要原因。因为大多数的人，是靠着做过，了解过很多的知识来解决问题的。知识的多寡正好体现了一个人的价值。然后，真正改变程序界的，是后一小撮人，他们用思维来解决问题，旁征博引，创新，并且根据问题来分析解决方案，找到很多简单且有效的方法。</p>

<p>我相信，很多的程序员一开始都是很聪明的，但是这个浮躁的圈子，这些复杂的概念，让我们渐渐忘却了思考，忘却了自己的能力，分析问题，解决问题，动手的能力。当我们遇到了问题，只要抛开我们固有的知识，抛开google百度，抛开API，抛开数据结构，就用心去思考，一定可以得到更好的答案的。</p>

<p>那么把这个问题延伸开来，你会发现很多相似的问题：</p>

<ol>
<li>班上要选举班长，每个人写了一个名字，最后要统计谁最高和大家的票数</li>
<li>你有一个字符串，试着统计里面每个字符出现的次数</li>
<li>你有一个关于老师数据库，里面存着老师户籍的数据，试着分析老师的来源地区的分布</li>
</ol>


<p>其实我们还可以举很多例子，能把复杂的问题，想象得简单，这本身就是大家有的一种能力。只是因为我们的知识在增长，工具在进化，而我们变得懒惰了。很多时候，我们都沦为了罗列API的产业工人。大家不觉得悲哀么？</p>

<h3><strong>编程思想来源于思想，希望大家不要忘了本质，我们真的可以更多的发挥自己的潜质！</strong></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014-8-28 周四 晴]]></title>
    <link href="http://williamzang.com/blog/2014/08/28/2014-8-28-zhou-si-qing/"/>
    <updated>2014-08-28T15:00:58+08:00</updated>
    <id>http://williamzang.com/blog/2014/08/28/2014-8-28-zhou-si-qing</id>
    <content type="html"><![CDATA[<h3>不要忽视C语言</h3>

<p>看到过很多人发表过对C语言的抨击，称其看起来很难看，面向过程是一种旧时代的产物。</p>

<p>我想说的是，请不要忽视C语言。</p>

<p>几乎所有的学校都会以C语言作为一个入门的语言。我觉得有几点需要思考：</p>

<ol>
<li><p>C的确是很“入门”的语言，因为他的学习曲线较为轻松，初学的时候既没有大量的库和框架，也没有复杂的语法概念（指针稍微麻烦一些），还没有很复杂的开发环境。面向过程的程序是最直观和易了解的。</p></li>
<li><p>C语言很利于锻炼一个人的开发思想，实际解决问题的能力，C语言的考核应该是纯粹的能力考核，而不是对各种库和框架的熟悉程度。</p></li>
<li><p>C语言是实现操作系统和数据结构的最佳语言，首先它没有太多的库的包袱，其次它可以方便的访问硬件。它不会让你觉得实现动态数组是很无聊的事（Ruby、Python党绝对不会想自己实现可变数组）。</p></li>
<li><p>C语言被老师给认为太简单了，很多的教师和教学机构只让最菜的老师来教C语言，这直接导致大家没有学好C语言。</p></li>
<li><p>C语言最精髓的部分被砍掉了，很多的学校C语言的学时通常不够，所以结构体、位段、高级指针、预编译等通常都被阉割了。第4条所说的老师们，又碍于面子，对学生提出的”指针的指针应该怎么用？”“为什么int a[3][5]和int **b不能互相转化？”的问题回答通常是“这个用不到。”。这就导致大家对C的普遍认知存在问题。</p></li>
<li><p>C语言的教学目的是让入门者可以更快的掌握计算机开发的一些原理，并快速实践。但C语言绝不是只能面向过程设计的，几乎所有的C核心代码都是面向对象设计的，例如Linux、Win32内核、大家在iOS中的各种核心库如CoreGraphics、CoreText等。对于iOS开发者来说，如果你稍多了解就可以知道你是可以用C来生成ObjC的类和方法的，而这些几乎没有老师交代过。</p></li>
</ol>


<p>首先背负着沉重的教育背景，C已经让绝大部分人忽视了，接下来的就业环节又让C被更加的忽视：</p>

<ol>
<li><p>没有多少公司用C</p></li>
<li><p>很多的公司和老板觉得C没啥用，又干不了什么</p></li>
<li><p>搞Java、Ruby、Objective-C的同学都看起来不错，搞C的同学都在嵌入式公司赚少量的钱（呵呵，我当年就是）</p></li>
</ol>


<p>最后我来说一说了解C的必要性：</p>

<ol>
<li><p>对内存和硬件的操作，是目前绝大部分高级语言所隐藏的，只有坚实C背景的同学，才可以考虑的更多，如果你想对原理有更多的了解，那么C其实是不可绕过的一个环节。</p></li>
<li><p>想要缔造一个新的系统和语言，没有C是不行滴（或许C++勉强）。</p></li>
<li><p>不管是OC的消息系统，Java的自动回收，Ruby的动态类扩充，这些花哨且时髦的东西，其实都可以用C来实现，而且很多都是用C来实现的，如果你想自己实施，看C吧。</p></li>
<li><p>破解和分析程序，C可以起到很大的作用。C是可以人为创建Bug来破坏一个系统滴。</p></li>
</ol>


<blockquote><p>最后我引用我的一个大牛朋友的话：“请不要忽视C语言，它上可九天摘月，下可五洋捉鳖”。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工具链]]></title>
    <link href="http://williamzang.com/blog/2014/08/27/gong-ju-lian/"/>
    <updated>2014-08-27T17:27:45+08:00</updated>
    <id>http://williamzang.com/blog/2014/08/27/gong-ju-lian</id>
    <content type="html"><![CDATA[<p>每一个老开发者，都有很中意的一些工具，对于新的开发者来说，应该是一个很好的指引。我虽然不算什么老开发者，但是也有一定的心得。所以今天就分享一下我对于iOS所用到的工具吧。</p>

<p>最先介绍的是Mac下开发相关的App：</p>

<ol>
<li>同步助手&mdash;&mdash;-iPhone同步</li>
<li>AirServer&mdash;&ndash;用于将苹果设备投射到Mac屏幕上</li>
<li>Alfred 2&mdash;&mdash;好用的全局快捷菜单，比较爱用它当计算器</li>
<li>Android File Transfer&mdash;-Android同步，偶尔需要用到</li>
<li>BetterZip&mdash;&ndash;压缩解压</li>
<li>Genymotion&mdash;&ndash;Android虚拟机，用来对比Android效果</li>
<li>iTerm&mdash;&ndash;终端的最佳替换</li>
<li>MarkMan&mdash;&mdash;量图工具（Adobe Air环境）</li>
<li>Mou &mdash;&mdash;Markdown编辑工具，正在用</li>
<li>PaintCode&mdash;&mdash;OS X、iOS控件自绘工具</li>
<li>plistedit pro&mdash;&ndash;plist编辑工具</li>
<li>Reveal&mdash;&mdash;iOS视图调试工具</li>
<li>Simpholders&mdash;&mdash;iOS模拟器应用目录快速查询</li>
<li>Source Tree&mdash;&ndash;Git客户端</li>
<li>TextMate&mdash;&ndash;文本编辑</li>
<li>VirtualBox&mdash;&ndash;虚拟机 用作Genymotion支持</li>
<li>LICEcap&mdash;&mdash;&ndash;Git录屏软件，用来跟别人解释发生了什么</li>
<li>Docs for Xcode&mdash;&ndash;一些开源项目的文档集成</li>
<li>Charles&mdash;&mdash;-用来调试网络情况和Hook客户端调用结果的</li>
</ol>


<p>然后是命令行工具：</p>

<ol>
<li>Homebrew&mdash;&ndash;一切都靠他了</li>
<li>RVM&mdash;&ndash;Ruby版本管理工具</li>
<li>CocoaPods&mdash;-iOS、OS X包管理器</li>
<li>Oh-my-zsh&mdash;&mdash;漂亮的Zsh shell</li>
<li>xctool&mdash;-自动化集成</li>
<li>vim&mdash;&ndash;文本编辑器</li>
<li>calabash&mdash;&ndash;集成、UI测试工具</li>
<li>mogenerator&mdash;&mdash;-用来生成CoreData的子类，比Xcode实用</li>
</ol>


<p>Xcode的插件：</p>

<ol>
<li>Alcatraz&mdash;-插件管理器，其他的都靠它了</li>
<li>AdjustFontSize&mdash;&ndash;文本快速放大缩小</li>
<li>FuzzyAutocomplete&mdash;&mdash;补全工具，不过这个一开，有点补全太多了</li>
<li>HOStringSense&mdash;&ndash;NSString的长度测量，文本编码</li>
<li>KSImageNamed&mdash;-[UIImage imageNamed]的时候，自动出现图片选择</li>
<li>Lin&mdash;&mdash;-NSLocalizedString的快速增删改查
7.OMColorSense&mdash;&mdash;颜色插件</li>
<li>QuickLocalization&mdash;&ndash;NSLocalizedString快速生成</li>
<li>RevealPlugin&mdash;&ndash;快速打开Reveal</li>
<li>Singleton&mdash;-单例源代码模板</li>
<li>Specta&mdash;&ndash;specta测试代码模板</li>
<li>VVDocumenter-Xcode&mdash;&mdash;&mdash;代码注释生成器</li>
<li>XVim&mdash;&mdash;Xcode的Vim支持</li>
<li>SCXcodeSwitchExpander&mdash;&mdash;为枚举自动生成switch-case对</li>
</ol>


<p>最后是我在iOS中喜欢用的库：</p>

<ol>
<li>ReactiveCocoa&mdash;&mdash;-著名的RAC框架</li>
<li>ReactiveViewModel&mdash;&mdash;RAC支持MVVM的辅助类</li>
<li>libextobjc&mdash;&ndash;OC运行时扩展</li>
<li>WYPopoverController&mdash;-iPhone的Popover弹出框</li>
<li>pop&mdash;&ndash;Facebook的动画库</li>
<li>MBProgressHUD&mdash;-HUD弹出信息</li>
<li>PinYin4Objc&mdash;-反解拼音库</li>
<li>MNCalendarView@aceontech&mdash;-日历</li>
<li>MTDates&mdash;-NSDate的N多扩展</li>
<li>Mantle&mdash;-好的简易Model</li>
<li>SDWebImage&mdash;&ndash;图片缓存</li>
<li>XHImageViewer&mdash;-图片浏览器，挺多bug，有空给改改</li>
<li>UI7Kit&mdash;-iOS5 iOS6的iOS7扁平化界面快速替换，注意有坑</li>
<li>AFNetworking&mdash;&mdash;网络库</li>
<li>Tweaks&mdash;&mdash;Facebook的调试工具，晃一晃微调参数</li>
<li>UALogger&mdash;&ndash;Log工具</li>
<li>Calabash&mdash;&ndash;自动化测试工具</li>
<li>Nocilla&mdash;-网络模拟工具</li>
<li>Reveal-iOS-SDK&mdash;&ndash;视图调试工具</li>
<li>Expecta&mdash;&ndash;单元测试断言宏</li>
<li>Specta&mdash;-单元测试的DSL</li>
<li>OCMock&mdash;&mdash;OC的Mock测试工具</li>
<li>MagicalRecord&mdash;&mdash;CoreData高级辅助工具</li>
<li>FastAnimationWithPOP&mdash;&mdash;我自己写的动画库</li>
</ol>


<p>希望能对大家有所帮助，也欢迎和我交流。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014-8-18 周一 晴]]></title>
    <link href="http://williamzang.com/blog/2014/08/18/2014-8-18-zhou-yi-qing/"/>
    <updated>2014-08-18T11:28:38+08:00</updated>
    <id>http://williamzang.com/blog/2014/08/18/2014-8-18-zhou-yi-qing</id>
    <content type="html"><![CDATA[<p>今天就提一提升级的问题，仅是个人想法。</p>

<p>国内做app的公司，大都有一个特点，就是iOS的版本支持，都比较全面，支持iOS4以上的应用颇为普遍。广大的开发商认为这样可以让目前所有的用户都可以享用到自己的产品，广大的用户认为这样就可以用自己老的产品既不升级硬件，也不升级软件。其实在我看来，长久下去，是对大家都没有好处的。</p>

<p>大家都对某些东西的升级很感兴趣，而且有不给升级就恼怒的情况。这些升级是什么呢？比如职位的升级，工资的升级，职称的升级，家庭地位的升级。可见升级一直都是一个大家比较喜欢和向往的词儿。但是唯独到了软件的升级，就变成了一种痛苦。我们来听一听：</p>

<blockquote><p>iOS 8要来了，我们又得适配新的分辨率了<br/>
API又变了这么多，不晓得又有多少BUG<br/>
什么？这个应用要iOS7以上才可以装，真是个垃圾应用，老子不鸟它<br/>
大家都用上iOS7了，怎么升级啊，不会呢<br/>
为什么要升级，现在用的不是挺好的么<br/>
苹果开始审核不兼容iPhone5的分辨率就不让通过了</p></blockquote>

<p>其实，就单纯iOS来说，用户升级的软件成本已经越来越低了，OTA升级几乎让绝大多数的小白用户都可以在不明觉厉的情况下体验到新的版本。（<em>当然OTA升级后，系统实际上由于垃圾过多速度会稍稍拖慢</em>），那为什么还有那么多人不升级呢？原因有这几个</p>

<ol>
<li>很多程序都是兼容的，不升级也可以用新的</li>
<li>新的系统有BUG，还是等一等稳定的吧（这一等也许就等到你的设备退休）</li>
<li>喜欢老的界面，不喜欢变化</li>
<li>从来不关注这些，有升级提示也不看</li>
</ol>


<p>我们来一个一个分析一下，首先是兼容的问题。这是头等大事，因为软件可以用，当然不需要升级。试想一下，极端情况，如果所有的软件都是只支持最新版，你的iOS6毛应用都装不上，除了把它卖了，就只好升级了。当然这有点太激进，但是也是一种现象。软件的兼容反而是阻碍大家升级的主要原因。反过来看软件的兼容带来什么其他的麻烦了呢？作为开发者，你会发现这些现象：</p>

<ol>
<li>有新的API和开发方法了，不过这个不支持iOS 4，还是别看了</li>
<li>哦，这个API已经不能用了，那我们加个if(response)-else吧</li>
<li>XCode新版已经不支持编译了？我们得想办法装上旧版</li>
</ol>


<p>对于老的公司来说，有旧的版本的程序倒还好做兼容，只是在老的代码上缝缝补补，又可以穿个几年。但是对于新的公司来说，明明一个新的产品，却套上了旧的衣衫，拖慢了开发效率和执行效率不说，软件的“逼格”似乎也拉低了？什么？开发效率？是的，其实苹果每次发布新版iOS，都从API上做了很大的改进，目的当然不是为了让大家更麻烦，而是让大家更灵活的支持定制和拥有更简单的实现方式。Storyboard、Autolayout、包括最新的Size Classes。无一不是为了开发者而搞出来的，大家之所以那么抵触，实际上是因为浮躁和懒惰。浮躁在不愿意仔细了解，一旦发现问题和难点，就马上批判。懒惰在不想学习和研究新的变化，而懒惰的人更喜欢找借口。</p>

<p>往往见到的就是很多人，揪着新技术的一个小小的缺点，然后把它贬低的一无是处。如果是另外一个开发者因为你的一个bug，把你贬低的一无是处，你非气炸了不可。但是很多人就是这样对待新的API和工具的。一张漂漂亮亮的画作上，滴了墨水，很多人都会关注那瑕疵，遍不会好好看那画作了。其实大家静下心来，好好学习一下新的知识，你会发现，它真的可以帮助你好多。</p>

<p>关于新的系统的bug的问题，和上段刚提到的，是一样的，大家缺少包容，通常会对瑕疵有着格外的在意。大家在生活上或多或少都有着这样的感觉，就是你明明做得很辛苦，但是因为一件小事，被人抓到，然后仿佛你所有的努力都没有了。一份90分的卷纸，很少人在乎你做对了90分的题，掌握了90分的知识，只是看到你做错了10分的题，没有掌握或者马虎了10分的知识点。己所不欲，勿施于人。我们都希望世界可以更公平的对待每一个人，也都希望自己的努力可以得到重视，那么我们就不应该这样对待别人，对待新的，很多人努力的成果，不是批判它的瑕疵，而是体验它带来的便利。</p>

<p>喜欢老的界面这个问题，到是可以理解，萝卜白菜各有所爱，很多人在iOS6升7的时候，都有着不适应，似乎在Win7升8的时候更为强烈。主要还是一个习惯问题，我不觉得喜欢一种风格是值得抨击的。但是为了可以提供更好，更优质的软件，我还是喜欢用新的东西来创造。而且，我觉得，如果新的东西做得好起来，还是会让很多人有所改观，相信现在，很多人也已经接受扁平化的iOS7的风格了。</p>

<p>至于不关注的升级的人，其实很多也不关注软件的，所以开发者为了这个理由不升级，就更没有必要了不是么。</p>

<p>再来说说硬件成本，苹果的软件升级，对于较新的设备，是免费的，这点比微软要好，我们总是可以在不花钱的情况下领略新系统带来的便利。然后这总会在你的设备足够老的时候还回去，一旦你开始喜欢上新的系统，发现你不恩能再升级了，就会敦促你买一个新的设备了。苹果也可以那样长久下去。而苹果的长青，也关乎着千千万万的iOS开发者的腰包。所以，顺应潮流，大家都用新的系统来支持，广大的用户就会踊跃升级，也踊跃换新机，大家的开发也就又简单（因为用新的系统和API，减少兼容的代码）又赚得多了。</p>

<p>总之，面向新的时代，我们越能顺应潮流，就越快乐。</p>
]]></content>
  </entry>
  
</feed>
