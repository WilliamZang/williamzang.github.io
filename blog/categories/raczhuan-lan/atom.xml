<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rac专栏 | 臧成威的博客]]></title>
  <link href="http://williamzang.com/blog/categories/raczhuan-lan/atom.xml" rel="self"/>
  <link href="http://williamzang.com/"/>
  <updated>2016-11-07T22:35:23+08:00</updated>
  <id>http://williamzang.com/</id>
  <author>
    <name><![CDATA[臧成威]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS开发下的函数响应式编程]]></title>
    <link href="http://williamzang.com/blog/2016/06/27/ios-kai-fa-xia-de-han-shu-xiang-ying-shi-bian-cheng/"/>
    <updated>2016-06-27T10:25:19+08:00</updated>
    <id>http://williamzang.com/blog/2016/06/27/ios-kai-fa-xia-de-han-shu-xiang-ying-shi-bian-cheng</id>
    <content type="html"><![CDATA[<h2>版权说明</h2>

<p>本文为刊登于《程序员》杂志2016年5月刊。如需转载，请与《程序员》杂志联系。</p>

<h3>背景和面临的问题</h3>

<p>随着移动互联网的蓬勃发展，iOS App的复杂度呈指数增长。美团·大众点评两个App随着用户量不断增加、研发工程师数量不断增多，可用性的要求也随之不断提升。在这样的一个背景之下，我们面临了很多的问题和挑战。美团和大众点评的iOS工程师们面对挑战，想出了很多的策略和方针来应对，引入函数响应式编程就是美团App中重要的一环。</p>

<h3>函数响应式编程简介</h3>

<p>函数式编程想必您一定听过，但响应式编程的说法就不大常见了。与响应式编程对应的命令式编程就是大家所熟知的一种编程范式，我们先来看一段代码：</p>

<pre><code>    int a = 3;
    int b = 4;
    int c = a + b;
    NSLog(@"c is %d", c); // =&gt; 12
    a = 5;
    b = 7;
    NSLog(@"c is %d", c); // 仍然是12
</code></pre>

<p>命令式编程就是通过表达式或语句来改变状态量，例如c = a + b就是一个表达式，它创建了一个名称为c的状态量，其值为a与b的加和。下面的a = 5是另一个语句，它改变了a的值，但这时c是没有变化的。所以命令式编程中c = a + b只是一个瞬时的过程，而不是一个关系描述。在传统的开发中，想让c跟随a和b的变化而变化是比较困难的。而让c的值实时等于a与b的加和的编程方式就是响应式编程。</p>

<p>实际上，在日常的开发中我们会经常使用响应式编程的思想来进行开发。最典型的例子就是Excel，当我们在一个B1单元格上书写一个公式“=A1+5”时，便声明了一种对应关系，每当A1单元格发生变化时，单元格B2都会随之改变。</p>

<p><img src="/images/iOSinMeituan/1.png" alt="image" /><br/>
图1 Excel中的响应式</p>

<p>iOS开发中也有响应式编程的典型例子，例如Autolayout。我们通过设置约束描述了各个视图的位置关系，一旦其中一个变化，另一个就会响应其变化。类似的例子还有很多。</p>

<p>函数响应式编程（英文Functional Reactive Programming，以下简称FRP，）正是在函数式编程的基础之上，增加了响应式的支持。</p>

<p>简单来讲，FRP是基于异步事件流进行编程的一种编程范式。针对离散事件序列进行有效的封装，利用函数式编程的思想，满足响应式编程的需要。</p>

<p>区别于面向过程编程范式以过程单元作为核心组成部分，面向对象编程范式以对象单元作为核心组成部分，函数式编程范式以函数和高阶函数作为核心组成部分。FRP则以离散有序序列作为核心组成部分，也可将其定义为信号。其特点是具备可迭代特性并且允许离散事件节点有时间联系，计算机科学中称为Monad。</p>

<p>严格意义上来讲，下文提及的iOS开发下的函数响应式编程，并不能算完全的FRP，这一点，本文就不做学术上的讨论了。</p>

<p>接来下会为您介绍iOS相关的FRP内容，我们先从选型开始。</p>

<h3>iOS项目的函数响应式编程选型</h3>

<p>很长一段时间以来，iOS项目并没有很好的FRP支持，直到iOS 4.0 SDK中增加了Block语法才为函数式编程提供了前置条件，FRP开源库也逐步健全起来。</p>

<p>最先与大家见面的莫过于<a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a>这样一个库了，ReactiveCocoa是Github在制作Github客户端时开源的一个副产物，缩写为RAC。它是Objective-C语言下FRP思想的一个优秀实例，后续版本也支持了Swift语言。</p>

<p>Swift语言的推出为iOS界的函数式编程爱好者迎来了曙光。著名的FRP开源库Rx系列也新增了<a href="https://github.com/ReactiveX/RxSwift">RxSwift</a>，保持其接口与ReactiveX.net、RxJava、RxJS接口保持一致。</p>

<p>下面对不同厂商几个版本的FRP库进行简单的对比：</p>

<table>
<thead>
<tr>
<th style="text-align:center;">_      </th>
<th style="text-align:center;"> Objective-C 支持 </th>
<th style="text-align:center;"> Swift 支持 </th>
<th style="text-align:center;"> Cocoa框架支持 </th>
<th> 其他</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">RAC 2.5 </td>
<td style="text-align:center;"> √              </td>
<td style="text-align:center;"> ×            </td>
<td style="text-align:center;"> 完善           </td>
<td> 迭代周期长，稳定</td>
</tr>
<tr>
<td style="text-align:center;">RAC 3.0+</td>
<td style="text-align:center;"> √              </td>
<td style="text-align:center;"> √           </td>
<td style="text-align:center;"> 继承2.5版本           </td>
<td> 开始全面支持Swift</td>
</tr>
<tr>
<td style="text-align:center;">RxSwift </td>
<td style="text-align:center;"> ×               </td>
<td style="text-align:center;"> √           </td>
<td style="text-align:center;"> 不完善           </td>
<td> 符合Rx标准</td>
</tr>
</tbody>
</table>


<p> 表1 iOS下几种FRP库的对比</p>

<p>美团App由于历史原因仍然沿用ReactiveCocoa 2.5版本。下文也主要会针对ReactiveCocoa 2.5版本做介绍，但各位可以根据自己项目的需要来选择FRP库，其思想和主要的API大同小异。</p>

<p>为什么需要在iOS项目中引入FRP这样厚重的库呢？</p>

<p>iOS的项目主要以客户端项目为主，主要的业务场景就是进行页面交互和与服务器拉取数据，这里面会包含多种事件和异步处理逻辑。FRP本身就是面向事件流的一种开发方式，又擅长处理异步逻辑。所以从逻辑上是满足iOS客户端业务需要的。</p>

<p>然而能够把一个理念融合到实际的项目中，需要一个漫长的过程。所以接下来就根据美团App在FRP上的实践，具体讲述下融入FRP的过程。希望能给大家一些参考。</p>

<h3>一步一步进行函数响应式编程</h3>

<p>众所周知，FRP的学习是存在一定门槛的，想必这也是大家对FRP、ReactiveCocoa这些概念比较畏惧的主要原因。美团App在推行FRP的过程中，是采用分步骤的形式，逐步演化的。其演化的过程可以分为初探、入门、提高、进阶这样四个阶段。</p>

<h4>初探</h4>

<p>美团App是在2014年5月第一次将ReactiveCocoa这个开源库纳入到工程中的，当时iOS工程师数量还不是很多，但是已经遇到了写法不统一、代码量膨胀等问题了。</p>

<p>写法不统一聚焦在回调形式的不统一上，iOS中的回调方式有非常多的种类：UIKit主要进行的事件处理target-action、跨类依赖推荐的delegate模式、iOS 4.0纳入的block、利用通知中心（Notifcation Center）进行松耦合的回调、利用键值观察（Key-Value Observe，简称KVO）进行的监听。由于场景不同，选用的规则也不尽相同，并且我们没有办法很好的界定什么场景该写什么样的回调。</p>

<p>这时我们发现ReactiveCocoa这样一个开源库，恰好能以统一的形式来解决跨类调用的问题，也包装了UIKit事件处理、Notifcation Center、KVO等常见的场景。使其代码风格上高度统一。</p>

<p>使用ReactiveCocoa进行统一后，上述的几种回调都可以写成如下形式：</p>

<pre><code>// 代替target-action
    [[self.confirmButton rac_signalForControlEvents:UIControlEventTouchUpInside]
     subscribeNext:^(id x) {
        // 回调内容写在这里
     }];

// 代替delegate
    [[self.scrollView rac_signalForSelector:@selector(scrollViewDidScroll:) fromProtocol:@protocol(UIScrollViewDelegate)]
     subscribeNext:^(id x) {
        // 回调内容写在这里
     }];

// 代替block
    [[self asyncProcess]
     subscribeNext:^(id x) {
        // 回调内容写在这里
     } error:^(NSError *error) {
        // 错误处理写到这里
     }];

// 代替notification center
    [[[NSNotificationCenter defaultCenter] rac_valuesForKeyPath:@"Some-key" observer:nil]
     subscribeNext:^(id x) {
        // 回调内容写在这里
     }];

// 代替KVO
    [RACObserve(self, userReportString)
     subscribeNext:^(id x) {
        // 回调内容写在这里
     }];
</code></pre>

<p>代码1 回调统一</p>

<p>通过观察代码不难发现，ReactiveCocoa使得不同场景下的代码样式上高度统一，使我们在书写代码、维护代码、阅读代码方面的效率大大提高。</p>

<p>经过一定的研究，我们也发现使用<code>RAC(target, key)</code>宏可以更好组织代码形式，利用<code>filter:</code>和<code>map:</code>来代替原有的代码，达到更好复用，例如下面两段代码：</p>

<pre><code>// 旧写法
    @weakify(self)
    [[self.textField rac_newTextChannel]
     subscribeNext:^(NSString *x) {
         @strongify(self)
         if (x.length &gt; 15) {
             self.confirmButton.enabled = NO;
             [self showHud:@"Too long"];
         } else {
             self.confirmButton.enabled = YES;
         }
         self.someLabel.text = x;

     }];

// 新写法
    RACSignal *textValue = [self.textField rac_newTextChannel];
    RACSignal *isTooLong = [textValue
                            map:^id(NSString *value) {
                                return @(value.length &gt; 15);
                            }];
    RACSignal *whenItsTooLongMessage = [[isTooLong
                                         filter:^BOOL(NSNumber *value) {
                                             return @(value.boolValue);
                                         }]
                                        mapReplace:@"Too long"];
    [self rac_liftSelector:@selector(showHud:) withSignals:whenItsTooLongMessage, nil];
    RAC(self.confirmButton, enabled) = [isTooLong not];
    RAC(self.someLabel, text) = textValue;
</code></pre>

<p>代码2 逻辑优化</p>

<p>上述代码修改虽然代码行数有一定的增加，但是结构更加清晰，复用性也做得更好。</p>

<p>综上所述，在这一阶段，我们主要以回调形式的统一为主，不断尝试合适的代码形式来表达绑定这种关系，也寻找一些便捷的小技巧来优化代码。</p>

<h4>入门</h4>

<p><img src="/images/iOSinMeituan/2.png" alt="image" /><br/>
图2 美团App首页</p>

<p>单纯解决回调风格的统一和树立绑定的思维是远远不够的，代码中更大的问题在于共享变量、异步协同以及异常传递的处理。
列举几个简单的场景，就拿美团App的首页来讲，我们可以看到上面包含很多的区块，而各个区块的访问接口不尽相同，但是渲染的逻辑却又多种多样：</p>

<ul>
<li>有的需要几个接口都返回后才能统一渲染。</li>
<li>有的需要一个接口返回后，根据返回的内容决定后续的接口访问，最终才能渲染。</li>
<li>有的则是几个接口按照返回顺序依次渲染。</li>
</ul>


<p>这就导致我们在处理这些逻辑的时候，需要很多的异步处理手段，利用一些中间变量来储存状态，每次返回的时候又判断这些状态决定渲染的逻辑。</p>

<p>更糟糕的是，有的时候对于同时请求多个网络接口，某些出现了网络错误，异常处理也变得越来越复杂。</p>

<p>随着对ReactiveCocoa理解的加深，我们意识到使用信号的组合等“高级”操作可以帮助我们解决很多的问题。例如<code>merge:</code>操作可以解决依次渲染的问题，<code>zip:</code>操作可以解决多个接口都返回后再渲染的问题，<code>flattenMap:</code>可以解决接口串联的问题。大概的示例代码如下：</p>

<pre><code>// 依次渲染
    RACSignal *mergedSignal = [RACSignal merge:@[[self fetchData1],
                                                 [self fetchData2]]];

// 接口都返回后一起渲染
    RACSignal *zippedSignal = [RACSignal zip:@[[self fetchData1],
                                               [self fetchData3]]];

// 接口串联
    @weakify(self)
    RACSignal *finalSignal = [[self fetchData4]
                              flattenMap:^RACSignal *(NSString *data4Result) {
                                  @strongify(self)
                                  return [self fetchData5:data4Result];
                              }];
</code></pre>

<p>没有用到一个中间状态变量，我们通过这几个“魔法接口”神奇地将逻辑描述了出来。这样写的好处还有很多。</p>

<p>FRP具备这样一个特点，信号因为进行组合从而得到了一个数据链，而数据链的任一节点发出错误信号，都可以顺着这个链条最终交付给订阅者。这就正好解决了异常处理的问题。</p>

<p><img src="/images/iOSinMeituan/3.png" alt="image" /><br/>
图3 错误传递链</p>

<p>由于此项特性，我们可以不再关注错误在哪个环节，只需等待订阅的时候统一处理即可。我们也找到了很多的方法用来更好地支持异常的处理。例如<code>try:</code>、<code>catch:</code>、<code>catchTo:</code>、<code>tryMap:</code>等。</p>

<p>简单列举下示例：</p>

<pre><code>// 尝试判断并捕捉异常
    RACSignal *signalForSubscriber =

      [[[[[self fetchData1]
          try:^BOOL(NSString *data1,
                    NSError *__autoreleasing *errorPtr) {
              if (data1.length == 0) {
                  *errorPtr = [NSError new];
                  return YES;
              }
              return NO;
          }]
         flattenMap:^RACStream *(id value) {
             @strongify(self)
             return [self fetchData5:value];
         }]
        try:^BOOL(id value,
                  NSError *__autoreleasing *errorPtr) {
            if (![value isKindOfClass:[NSString class]]) {
                *errorPtr = [NSError new];
                return YES;
            }
            return NO;
        }]
       catch:^RACSignal *(NSError *error) {
           return [RACSignal return:error.domain];
       }];
</code></pre>

<p>总结一下，在这个阶段，我们主要尝试解决了异步协同的问题，包括了异常的处理。运用了异常处理模型来解决了很多的实际问题，同时继续寻找了更多的技巧来优化代码。</p>

<p>在初探和入门这两个阶段，美团App还只是谨慎地进行小的尝试，主旨是以代码简化为目的，使用ReactiveCocoa这个开源框架的一些便利功能来优化代码。在代码覆盖程度上尽量只在模块内部使用，避免跨层使用ReactiveCocoa。</p>

<h4>提高</h4>

<p>随着对ReactiveCocoa这个开源框架的理解不断加深。美团App并不满足于简单的尝试，而是开始在更多的场景下使用ReactiveCocoa，并体现一定的FRP思想。这个阶段最具代表性的实践就是与MVVM架构的融合了，它就是体现了FRP响应式的思想。</p>

<p>Model-View-Controller（简称MVC）是苹果Cocoa框架默认的一个架构。实际上业务场景的复杂度越来越高，而MVC架构自身也存在分层不清晰等诸多问题，最终使得MVC这一架构在实际的使用中渐渐走了样。</p>

<p>Model-View-ViewModel（简称MVVM）便是近几年来十分推崇的一种架构，它解决了MVC架构的一些不足，在层次定义上更为清晰。在MVVM的架构中，最为关键的一环莫过于ViewModel层与View层的绑定了，我们的主角FRP恰好可以解决绑定问题，同时还能处理跨层错误处理的问题。</p>

<p>先来关注下绑定，自初探阶段开始，我们就开始使用<code>RAC(target, key)</code>这样的一个宏来表述绑定的关系，并且使用一些简单的信号转换使得原始信号满足视图渲染的需求。在引入MVVM架构后，我们将之前的经验利用起来，并且使用了RACChannel、RACCommand等组件来支持MVVM。</p>

<pre><code>// 单向绑定
    RAC(self.someLabel, text) = RACObserve(self.viewModel, someProperty);
    RAC(self.scrollView, hidden) = self.viewModel.someSignal;
    RAC(self.confirmButton, frame) = [self.viewModel.someChannel
                                      map:^id(NSString *str) {
                                          CGRect rect = CGRectMake(0, 0, 0, str.length * 3);
                                          return [NSValue valueWithCGRect:rect];
                                      }];

// 双向绑定
    RACChannelTo(self.someLabel, text) = RACChannelTo(self.viewModel, someProperty);
    [self.textField.rac_newTextChannel subscribe:self.viewModel.someChannel];
    [self.viewModel.someChannel subscribe:self.textField.rac_newTextChannel];
    RACChannelTo(self, reviewID) = self.viewModel.someChannel;

// 命令绑定
    self.confirmButton.rac_command = self.viewModel.someCommand;

    RAC(self.textField, hidden) = self.viewModel.someCommand.executing;
    [self.viewModel.someCommand.errors
     subscribeNext:^(NSError *error) {
         // 错误处理在这里
     }];
</code></pre>

<p>绑定只是提供了上层的业务逻辑，更为重要的是，FRP的响应式范式恰如其分地体现在MVVM中。一个MVVM中View就会响应ViewModel的变化。我们来根据一副简单的图来分析一下：</p>

<p><img src="/images/iOSinMeituan/4.png" alt="image" /><br/>
图4 MVVM示意图</p>

<p>上述简图列出了View-ViewModel-Model的大致关系，View和ViewModel间通过RACSignal来进行单向绑定，通过RACChannel来进行双向绑定，通过RACCommand进行执行过程的绑定。</p>

<p>ViewModel和Model间通过RACObserve进行监听，通过RACSignal进行回调处理，也可以直接调用方法。</p>

<p>Model有自身的数据业务逻辑，包含请求Web Service和进行本地持久化。</p>

<p>响应式的体现就在于View从一开始就是“声明”了与ViewModel间的关系，就如同A3单元格声明其“=A2+A1”一样。一旦后续数据发生变化，就按照之前的约定响应，彼此之间存在一层明确的定义。View在业务层面也得到了极大简化。</p>

<p>具体的数据流动就如同下图两种形式：</p>

<p><img src="/images/iOSinMeituan/5.png" alt="image" /><br/>
<img src="/images/iOSinMeituan/6.png" alt="image" /><br/>
图5&amp;图6 MVVM的数据流向示意</p>

<p>从两张图中可以看出，无论View收到用户修改TextField的文本框内容的事件，还是受到用户点击Button的事件。View层都不需要对此做特殊的逻辑处理，只是将之传递给ViewModel。而ViewModel自身维护逻辑，并体现在某些绑定关系上。这是与MVC中ViewController和Model的关系是截然不同的。FRP的响应式范式很好的帮助我们实现了此类需求。</p>

<p>之前虽然也提到过错误处理，但是也提到美团App在初探和入门阶段，只是小规模的在模块内使用，对外并不会以RACSignal的形式暴露。而这个阶段，我们也尝试了层级间通过RACSignal来进行信息的传递。这也自然可以应用上FRP异常处理的优势。</p>

<p><img src="/images/iOSinMeituan/7.png" alt="image" /><br/>
图7 MVVM的数据流向示意</p>

<p>上图体现了一个按钮绑定了RACCommand收到错误后的一个数据流向。</p>

<p>除了MVVM框架的应用，这个阶段美团App也利用FRP解决另外的一个大问题。那就是多线程。</p>

<p>如果你做过异步拉取数据主线程渲染，那么你一定很熟悉子线程的回调结果转移到主线程的过程。这种操作不但繁琐，重复，关键还容易出错。</p>

<p>RAC提供了很多便于处理多线程的组件，核心类为RACScheduler，使得可以方便的通过<code>subscirbeOn:</code>方法、<code>deliverOn:</code>方法进行线程控制。</p>

<pre><code>// 多线程控制
    RACScheduler *backgroundScheduler = [RACScheduler scheduler];
    RACSignal *testSignal = [[RACSignal
                             createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) {
                                 // 本例中，这段代码会确保运行在子线程
                                 [subscriber sendNext:@1];
                                 [subscriber sendCompleted];
                                 return nil;
                             }]
                             subscribeOn:backgroundScheduler];

    [[RACScheduler mainThreadScheduler]
     schedule:^{
        // 这段代码会在下次Runloop时在主线程中运行
         [[testSignal
          deliverOn:[RACScheduler mainThreadScheduler]]
            subscribeNext:^(id x) {
                // 虽然信号的发出者是在子线程中发出消息的
                // 但是接收者确可以确保在主线程接收消息

                // 主线程可以做你想做的渲染工作了！
            }
         ];
     }];
</code></pre>

<p>这一个阶段也算是大跃进的一个阶段，随着MVVM的框架融入，跨层的使用RAC使得代码整体使用FRP的比重大幅提高，全员对FRP的熟悉程度和思想的理解也变得深刻了许多。同时也真正使用了响应式的一些思想和特性来解决实际的问题。使其不再是纸上空谈。</p>

<p>我们美团App也在这个阶段挖掘了更多的RAC高级组件，继续代码优化的持续之路。</p>

<h4>进阶</h4>

<p>美团App的iOS工程师们在大规模使用FRP后，也积蓄了很多的问题。很多小伙伴也问起了，既然是叫FRP，为什么一直体现的都是响应式的思想，对于函数式的思想应用体现似乎不是很明显。虽然FRP是F开头，称为函数响应式编程。但是考虑到函数式编程的复杂性，我们也将函数式编程的优化拿到了进阶这一阶段来尝试。</p>

<p>这一阶段面临的问题是RAC的大规模应用，使得代码中包含了大量的框架性质的代码。例如下面的代码：</p>

<pre><code>// 冗余的代码
    [[self fetchData1]
     try:^BOOL(id value,
               NSError *__autoreleasing *errorPtr) {
         if ([value isKindOfClass:[NSString class]]) {
             return YES;
         }
         *errorPtr = [NSError new];
         return NO;
     }];

    [[self fetchData2]
     tryMap:^id(NSDictionary *value, NSError *__autoreleasing *errorPtr) {
         if ([value isKindOfClass:[NSDictionary class]]) {
             if (value[@"someKey"]) {
                 return value[@"someKey"];
             }
             // 并没有一个名为“someKey”的key
             *errorPtr = [NSError new];
             return nil;
         }
         // 这不是一个Dictionary
         *errorPtr = [NSError new];
         return nil;
     }];

    [[self fetchData3]
     tryMap:^id(NSDictionary *value, NSError *__autoreleasing *errorPtr) {
         if ([value isKindOfClass:[NSDictionary class]]) {
             if (value[@"someOtherKey"]) {
                 return value[@"someOtherKey"];
             }
             // 并没有一个名为“someOtherKey”的key
             *errorPtr = [NSError new];
             return nil;
         }
         // 这不是一个Dictionary
         *errorPtr = [NSError new];
         return nil;
     }];
</code></pre>

<p>上述的几个代码段，我们可以看到功能非常近似，内容稍有不同的部分重复出现，很多的同学在实际的开发中也并没有太好地优化它们，甚至很多的同学表示束手无策。这时候函数式编程就可以派上用场了。</p>

<p>函数式编程是一种良好的编程范式，我们在这里主要利用它的几个特点：高阶函数、不变量和迭代。</p>

<p>先来看高阶函数，高阶函数是入参是函数或者返回值是函数的函数。说起来虽然有些拗口，但实际上在iOS开发中司空见惯，例如典型的订阅其实就是一个高阶函数的体现。</p>

<pre><code>// 高阶函数
    [[self fetchData1]
     subscribeNext:^(id x) {
        // 这是一个block，作为一个参数
     }];
</code></pre>

<p>我们更关心的是返回值是函数的函数，这是上面冗长的代码解决之道。代码7的代码中会发现一些相同的逻辑，例如类型判断。我们就可以先做一个这样的小函数：</p>

<pre><code>typedef BOOL (^VerifyFunction)(id value);

VerifyFunction isKindOf(Class aClass)
{
    return ^BOOL(id value) {
        return [value isKindOfClass:aClass];
    };
}
</code></pre>

<p>瞧，很简单对不对！只要把一个类型传进去，就会得到一个用来判断某个对象是否是这个类型的函数。细心的读者会发现我们实际要的是一个入参为对象和一个NSError对象指针的指针类型，返回值是布尔类型的block，但是这个只能返回入参是对象的，显然不满足条件。很多人第一个想到的就是把这个函数改成返回参数为两个参数返回值为布尔类型的block，但是函数式的解决方法是新增一个这样的函数：</p>

<pre><code>typedef BOOL (^VerifyAndOutputErrorFunction)(id value, NSError **error);

VerifyAndOutputErrorFunction verifyAndOutputError(VerifyFunction verify,
                                                  NSError *outputError)
{
    return ^BOOL(id value, NSError **error) {
        if (verify(value)) {
            return YES;
        }
        *error = outputError;
        return NO;
    };
}
</code></pre>

<p>一个典型的高阶函数，入参带有一个block，返回值也是一个block，组合起来就可以把刚才的几个<code>try:</code>代码段优化。可能你会问，为什么要搞成两个呢，一个不是更好？搞成两个的好处就在于，我们可以将任意的VerifyFunction类型的block与一个outputError相结合，来返回一个我们想要的VerifyAndOutputErrorFunction类型block，例如增加一个判断NSDictionary是否包含某个Key的VerifyFunction。下面给出一个优化后的代码，大家可以仔细思考下：</p>

<pre><code>// 可以高度复用的函数
typedef BOOL (^VerifyFunction)(id value);

VerifyFunction isKindOf(Class aClass)
{
    return ^BOOL(id value) {
        return [value isKindOfClass:aClass];
    };
}

VerifyFunction hasKey(NSString *key)
{
    return ^BOOL(NSDictionary *value) {
        return value[key] != nil;
    };
}

typedef BOOL (^VerifyAndOutputErrorFunction)(id value, NSError **error);

VerifyAndOutputErrorFunction verifyAndOutputError(VerifyFunction verify,
                                                  NSError *outputError)
{
    return ^BOOL(id value, NSError **error) {
        if (verify(value)) {
            return YES;
        }
        *error = outputError;
        return NO;
    };
}

typedef id (^MapFunction)(id value);

MapFunction dictionaryValueByKey(NSString *key)
{
    return ^id(NSDictionary *value) {
        return value[key];
    };
}

// 与本例关联比较大的函数
typedef id (^MapAndOutputErrorFunction)(id value, NSError **error);
MapAndOutputErrorFunction transferToKeyChild(NSString *key)
{
    return ^id(id value, NSError **error) {
        if (hasKey(key)(value)) {
            return dictionaryValueByKey(key)(value);
        } else {
            *error = [NSError new];
            return nil;
        }
    };
};

- (void)oldStyle
{
    // 冗余的代码
    [[self fetchData1]
     try:^BOOL(id value,
               NSError *__autoreleasing *errorPtr) {
         if ([value isKindOfClass:[NSString class]]) {
             return YES;
         }
         *errorPtr = [NSError new];
         return NO;
     }];

    [[self fetchData2]
     tryMap:^id(NSDictionary *value, NSError *__autoreleasing *errorPtr) {
         if ([value isKindOfClass:[NSDictionary class]]) {
             if (value[@"someKey"]) {
                 return value[@"someKey"];
             }
             // 并没有一个名为“someKey”的key
             *errorPtr = [NSError new];
             return nil;
         }
         // 这不是一个Dictionary
         *errorPtr = [NSError new];
         return nil;
     }];

    [[self fetchData3]
     tryMap:^id(NSDictionary *value, NSError *__autoreleasing *errorPtr) {
         if ([value isKindOfClass:[NSDictionary class]]) {
             if (value[@"someOtherKey"]) {
                 return value[@"someOtherKey"];
             }
             // 并没有一个名为“someOtherKey”的key
             *errorPtr = [NSError new];
             return nil;
         }
         // 这不是一个Dictionary
         *errorPtr = [NSError new];
         return nil;
     }];
}

- (void)newStyle
{

    VerifyAndOutputErrorFunction isDictionary = 
      verifyAndOutputError(isKindOf([NSDictionary class]),
                        NSError.new);
    VerifyAndOutputErrorFunction isString =      
      verifyAndOutputError(isKindOf([NSString class]),
                           NSError.new);

    [[self fetchData1]
     try:isString];

    [[[self fetchData2]
      try:isDictionary]
      tryMap:transferToKeyChild(@"someKey")];

    [[[self fetchData3]
      try:isDictionary]
     tryMap:transferToKeyChild(@"someOtherKey")];
}
</code></pre>

<p>虽然代码有些多，但是从newStyle函数的结果来看，我们在实际的业务代码上非常的简洁，而且还抽离出很多可复用的小函数。在实际的业务中，我们甚至通过这种范式在某些业务场景简化了超过50%的代码量。</p>

<p>除此之外，我们还尝试用迭代来进一步减少临时变量。为什么要减少临时变量呢？因为我们想要遵循不变量原则，这是函数式编程的一个特点。试想下如果我们都是使用一些不变量，就不再会有那么多异步锁和痛苦的多线程问题了。基于以上考虑，我们要求工程师尽量在开发的过程中减少使用变量，从而锻炼用更加函数式的方式来解决问题。</p>

<p>例如下面的简单问题，实现一个每秒发送值为0 1 2 3 … 100的递增整数信号，实现的方法可以是这样：</p>

<pre><code>- (void)countSignalOldStyle
{
    RACSignal *signal =
    [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) {
        RACDisposable *disposable = [RACDisposable new];
        __block int i = 0;
        __block void (^recursion)();
        recursion = ^{
            if (disposable.disposed || i &gt; 100) {
                return;
            }
            [subscriber sendNext:@(i)];
            ++i;
            [[RACScheduler mainThreadScheduler]
             afterDelay:1 schedule:recursion];
        };
        recursion();
        return disposable;
    }];
}
</code></pre>

<p>这样的代码不但用了block自递归，还用了一个闭包的i变量。i变量也在数次递归中进行了修改。代码不易理解且block自递归会存在循环引用。使用迭代和不变量的形式是这样的：</p>

<pre><code>- (void)countSignalNewStyle
{
    RACSignal *signal =
    [[[[[[RACSignal return:@1]
         repeat] take: 100]
       aggregateWithStart:@0 reduce:^id(NSNumber *running,
                                        NSNumber *next) {
           return @(running.integerValue + next.integerValue);
       }]
      map:^id(NSNumber *value) {
          return [[RACSignal return:value]
                  delay:1];
      }]
     concat];
}
</code></pre>

<p>解法是这样的，先用固定返回1的信号生成一个无限重复信号，取前100个值，然后用迭代方法，产生一个递增的迭代，再将发送的密集的递增信号转成一个延时1秒的子信号，最后将子信号进行连接。感兴趣的同学可以自己动手尝试下，也希望大家都去思考不适用变量来解决问题的思路。</p>

<p>这些函数式的写法不仅解决了业务上的问题，也给我们美团App的iOS工程师们开拓了代码优化的新思路。</p>

<p>可以看到，到这一阶段，需要对FRP的理解要求更高。为了追求更好的代码体验，我们朝着FRP的道路又迈进了许多，走到这一步是每一个美团App的iOS工程师共同努力的结果。这是一个尚未完结的阶段，我们的工程师仍然在不选找寻更好的FRP范式。对于开发人员来说，优化之路永远不会停步。</p>

<h3>总结</h3>

<p>单纯靠这样一篇文章来介绍全部的FRP思想是不可能的，这也仅是起到了抛砖引玉的作用。FRP不仅可以解决项目中实际遇到的很多问题，也能锻炼更好的工程师素养。希望大家能够掌握起来，用FRP的思想来解决更多实际的问题。社区和开源库也需要大家的不断投入。谢谢大家！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[细说ReactiveCocoa的冷信号与热信号]]></title>
    <link href="http://williamzang.com/blog/2015/08/18/talk-about-reactivecocoas-cold-signal-and-hot-signal/"/>
    <updated>2015-08-18T12:21:28+08:00</updated>
    <id>http://williamzang.com/blog/2015/08/18/talk-about-reactivecocoas-cold-signal-and-hot-signal</id>
    <content type="html"><![CDATA[<h2>版权说明</h2>

<p>本文为 <a href="http://tech.meituan.com/">美团点评技术团队博客</a> 特供稿件，<a href="http://tech.meituan.com/talk-about-reactivecocoas-cold-signal-and-hot-signal-part-1.html">首发地址在此</a>。如需转载，请与 美团点评技术团队博客 联系。</p>

<h2>背景</h2>

<p><a href="http://www.github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a>（简称RAC）是一套基于Cocoa的FRP框架，在我们美团客户端中，我们大量使用了这个框架。而在使用的过程中我们发现，冷信号与热信号的概念很容易混淆并且容易造成一定的问题，相信各位在使用的过程中也可能遇到此类问题。所以我在这里与大家讨论下RAC中冷信号与热信号的相关知识点，希望可以加深大家对冷热信号的理解。</p>

<p>p.s. 以下代码和示例基于<a href="https://github.com/ReactiveCocoa/ReactiveCocoa/releases/tag/v2.5">ReactiveCocoa v2.5</a></p>

<h2>什么是冷信号与热信号</h2>

<p>冷热信号的概念源于C#的MVVM框架<a href="https://msdn.microsoft.com/en-us/library/hh242985.aspx">Reactive Extensions</a>中的Hot Observables和Cold Observables:</p>

<blockquote><p>Hot Observables和Cold Observables的区别：</p>

<ol>
<li><p>Hot Observables是主动的，尽管你并没有订阅事件，但是它会时刻推送，就像鼠标移动；而Cold Observables是被动的，只有当你订阅的时候，它才会发布消息。</p></li>
<li><p>Hot Observables可以有多个订阅者，是一对多，集合可以与订阅者共享信息；而Cold Observables只能一对一，当有不同的订阅者，消息是重新完整发送。</p></li>
</ol>
</blockquote>

<p>这里面的Observables可以理解为RACSignal。为了加深理解，请大家关注这样的几组代码：</p>

<pre><code class="objective-c">    RACSignal *signal = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) {
        [subscriber sendNext:@1];
        [subscriber sendNext:@2];
        [subscriber sendNext:@3];
        [subscriber sendCompleted];
        return nil;
    }];
    NSLog(@"Signal was created.");
    [[RACScheduler mainThreadScheduler] afterDelay:0.1 schedule:^{
        [signal subscribeNext:^(id x) {
            NSLog(@"Subscriber 1 recveive: %@", x);
        }];
    }];

    [[RACScheduler mainThreadScheduler] afterDelay:1 schedule:^{
        [signal subscribeNext:^(id x) {
            NSLog(@"Subscriber 2 recveive: %@", x);
        }];
    }];    
</code></pre>

<p>以上简单的创建了一个信号，并且依次发送@1，@2，@3作为值。下面分别有两个订阅者在不同的时间段进行了订阅，运行的结果如下：</p>

<pre><code>2015-08-11 18:33:21.681 RACDemos[6505:1125196] Signal was created.
2015-08-11 18:33:21.793 RACDemos[6505:1125196] Subscriber 1 recveive: 1
2015-08-11 18:33:21.793 RACDemos[6505:1125196] Subscriber 1 recveive: 2
2015-08-11 18:33:21.793 RACDemos[6505:1125196] Subscriber 1 recveive: 3
2015-08-11 18:33:22.683 RACDemos[6505:1125196] Subscriber 2 recveive: 1
2015-08-11 18:33:22.683 RACDemos[6505:1125196] Subscriber 2 recveive: 2
2015-08-11 18:33:22.683 RACDemos[6505:1125196] Subscriber 2 recveive: 3
</code></pre>

<p>我们可以看到，信号在18:33:21.681时被创建，18:33:21.793依次接到1、2、3三个值，而在18:33:22.683再依次接到1、2、3三个值。说明了变量名为<code>signal</code>的这个信号，在两个不同时间段的订阅过程中，分别完整的发送了所有的消息。</p>

<p>我们再对这段代码进行一个小的改动：</p>

<pre><code class="objective-c">    RACMulticastConnection *connection = [[RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) {
        [[RACScheduler mainThreadScheduler] afterDelay:1 schedule:^{
            [subscriber sendNext:@1];
        }];

        [[RACScheduler mainThreadScheduler] afterDelay:2 schedule:^{
            [subscriber sendNext:@2];
        }];

        [[RACScheduler mainThreadScheduler] afterDelay:3 schedule:^{
            [subscriber sendNext:@3];
        }];

        [[RACScheduler mainThreadScheduler] afterDelay:4 schedule:^{
            [subscriber sendCompleted];
        }];
        return nil;
    }] publish];
    [connection connect];
    RACSignal *signal = connection.signal;

    NSLog(@"Signal was created.");
    [[RACScheduler mainThreadScheduler] afterDelay:1.1 schedule:^{
        [signal subscribeNext:^(id x) {
            NSLog(@"Subscriber 1 recveive: %@", x);
        }];
    }];

    [[RACScheduler mainThreadScheduler] afterDelay:2.1 schedule:^{
        [signal subscribeNext:^(id x) {
            NSLog(@"Subscriber 2 recveive: %@", x);
        }];
    }];
</code></pre>

<p>稍微有些复杂，我们来一一分析下：</p>

<ul>
<li>创建了一个信号，在1秒、2秒、3秒分别发送1、2、3这三个值，4秒发送结束信号。</li>
<li>对这个信号调用publish方法得到一个RACMulticastConnection。</li>
<li>将connection进行连接操作。</li>
<li>获得connection的信号。</li>
<li>分别在0.1秒和2秒订阅获得的信号。</li>
</ul>


<p>抛开RACMulticastConnection是个什么东东，我们先来看下结果：</p>

<pre><code>2015-08-12 11:07:49.943 RACDemos[9418:1186344] Signal was created.
2015-08-12 11:07:52.088 RACDemos[9418:1186344] Subscriber 1 recveive: 2
2015-08-12 11:07:53.044 RACDemos[9418:1186344] Subscriber 1 recveive: 3
2015-08-12 11:07:53.044 RACDemos[9418:1186344] Subscriber 2 recveive: 3
</code></pre>

<p>首先告诉大家<code>-[RACSignal publish]</code>、<code>- [RACMulticastConnection connect]</code>、<code>- [RACMulticastConnection signal]</code>这几个操作生成了一个热信号。
我们再来关注下输出结果的一些细节：</p>

<ul>
<li>信号在11:07:49.943被创建</li>
<li>11:07:52.088时订阅者1才收到2这个值，说明1这个值没有接收到，时间间隔是2秒多</li>
<li>11:07:53.044时订阅者1和订阅者2同时收到3这个值，时间间隔是3秒多</li>
</ul>


<p>参考一开始的Hot Observables的论述和两段小程序的输出结果，我们可以确定冷热信号的如下特点：</p>

<ul>
<li>一、热信号是主动的，即使你没有订阅事件，它仍然会时刻推送。（如第二个例子，信号在50秒被创建，51秒的时候1这个值就推送出来了，但是当时还没有订阅者。）而冷信号是被动的，只有当你订阅的时候，它才会发送消息。（如第一个例子。）</li>
<li>二、热信号可以有多个订阅者，是一对多，信号可以与订阅者共享信息（如第二个例子，订阅者1和订阅者2是共享的，他们都能在同一时间接收到3这个值。）而冷信号只能一对一，当有不同的订阅者，消息会从新完整发送。（如第一个例子，我们可以观察到两个订阅者没有联系，都是基于各自的订阅时间开始接收消息的。）</li>
</ul>


<h2>为什么要区分冷信号与热信号</h2>

<p>也许你看到这里并且看到这一章节的标题就会有疑问，为什么RAC要搞如此复杂的一个概念，直接搞成一种信号不就好了么？要解释这个问题需要绕一些弯路。（前方可能比较难懂，如果不能很好理解，请自行查阅各类文档。）</p>

<p>最前面提到了RAC是一套基于Cocoa的FRP框架，那就来说说FRP，FRP全写是Functional Reactive Programming，中文译作函数响应式编程，是RP（Reactive Programm，响应式编程）的FP（Functional Programming，函数式编程）实现。说起来很拗口。太多的细节不多讨论，我们先关注下它是FP的情况。</p>

<p>FP有几个很重要的概念是和我们的主题相关的：</p>

<p><a href="https://en.wikipedia.org/wiki/Functional_programming#Pure_functions">纯函数</a>是指一个函数或者一个表达式不存在任何的<a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)">副作用</a>，就如同数学中的函数：</p>

<blockquote><p>f(x) = 5x + 1</p></blockquote>

<p>这个函数在调用的过程中产生除了返回值以外的任何作用，也不受任何外界因素的影响。那么副作用都有哪些呢？我来列举以下几个情况：</p>

<ul>
<li>函数的处理过程中，修改了外部的变量，例如全局变量。一个特殊点的例子，就是如果把OC的一个方法看做一个函数，所有的成员变量的赋值都是对外部变量的修改。是的，从FP的角度看OOP是充满副作用的。</li>
<li>函数的处理过程中，触发了一些额外的动作，例如发送的全局的一个Notification，在console里面输出的结果，保存了文件，触发了网络，更新的屏幕等。</li>
<li>函数的处理过程中，受到外部变量的影响，例如全局变量，方法里面用到的成员变量。注意block中捕获的外部变量也算副作用。</li>
<li>函数的处理过程中，受到线程锁的影响算副作用。</li>
</ul>


<p>由此我们可以看出，在目前的iOS编程中，我们是很难的摆脱副作用的。或者换一种说法，我们iOS编程的目的其实是副作用。（基于用户触摸的外界因素，最终反馈到网络变化和屏幕变化上。）</p>

<p>接下来我们来分析下副作用与冷热信号的关系。既然iOS编程中少不了副作用，那么RAC在实际的使用中也不可避免的接触副作用，下面我列举个业务场景，来看下冷信号中副作用的坑：</p>

<pre><code class="objective-c">
    self.sessionManager = [[AFHTTPSessionManager alloc] initWithBaseURL:[NSURL URLWithString:@"http://api.xxxx.com"]];

    self.sessionManager.requestSerializer = [AFJSONRequestSerializer serializer];
    self.sessionManager.responseSerializer = [AFJSONResponseSerializer serializer];

    @weakify(self)
    RACSignal *fetchData = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) {
        @strongify(self)
        NSURLSessionDataTask *task = [self.sessionManager GET:@"fetchData" parameters:@{@"someParameter": @"someValue"} success:^(NSURLSessionDataTask *task, id responseObject) {
            [subscriber sendNext:responseObject];
            [subscriber sendCompleted];
        } failure:^(NSURLSessionDataTask *task, NSError *error) {
            [subscriber sendError:error];
        }];
        return [RACDisposable disposableWithBlock:^{
            if (task.state != NSURLSessionTaskStateCompleted) {
                [task cancel];
            }
        }];
    }];

    RACSignal *title = [fetchData flattenMap:^RACSignal *(NSDictionary *value) {
        if ([value[@"title"] isKindOfClass:[NSString class]]) {
            return [RACSignal return:value[@"title"]];
        } else {
            return [RACSignal error:[NSError errorWithDomain:@"some error" code:400 userInfo:@{@"originData": value}]];
        }
    }];

    RACSignal *desc = [fetchData flattenMap:^RACSignal *(NSDictionary *value) {
        if ([value[@"desc"] isKindOfClass:[NSString class]]) {
            return [RACSignal return:value[@"desc"]];
        } else {
            return [RACSignal error:[NSError errorWithDomain:@"some error" code:400 userInfo:@{@"originData": value}]];
        }
    }];

    RACSignal *renderedDesc = [desc flattenMap:^RACStream *(NSString *value) {
        NSError *error = nil;
        RenderManager *renderManager = [[RenderManager alloc] init];
        NSAttributedString *rendered = [renderManager renderText:value error:&amp;error];
        if (error) {
            return [RACSignal error:error];
        } else {
            return [RACSignal return:rendered];
        }
    }];

    RAC(self.someLablel, text) = [[title catchTo:[RACSignal return:@"Error"]]  startWith:@"Loading..."];
    RAC(self.originTextView, text) = [[desc catchTo:[RACSignal return:@"Error"]] startWith:@"Loading..."];
    RAC(self.renderedTextView, attributedText) = [[renderedDesc catchTo:[RACSignal return:[[NSAttributedString alloc] initWithString:@"Error"]]] startWith:[[NSAttributedString alloc] initWithString:@"Loading..."]];

    [[RACSignal merge:@[title, desc, renderedDesc]] subscribeError:^(NSError *error) {
        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:error.domain delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alertView show];
    }];
</code></pre>

<p>不晓得大家有没有被这么一大段的代码吓到，我想要表达的是，在真正的工程中，我们的业务逻辑是很复杂的，而一些坑就隐藏在如此看似复杂但是又很合理的代码之下。所以我尽量模拟了一些需求，使得代码看起来更丰富，下面我们还是来仔细看下这段代码的逻辑吧：</p>

<ol>
<li>创建了一个<code>AFHTTPSessionManager</code>用来做网络接口的数据获取。</li>
<li>创建了一个名为<code>fetchData</code>的信号来通过网络获取信息。</li>
<li>创建一个名为<code>title</code>的信号从获取的<code>data</code>中取得<code>title</code>字段，如果没有该字段则反馈一个错误。</li>
<li>创建一个名为<code>desc</code>的信号从获取的<code>data</code>中取得<code>desc</code>字段，如果没有该字段则反馈一个错误。</li>
<li>针对<code>desc</code>这个信号做一个渲染，得到一个名为<code>renderedDesc</code>的新信号，该信号会在渲染失败的时候反馈一个错误。</li>
<li>把<code>title</code>信号所有的错误转换为字符串<code>@"Error"</code>并且在没有获取值之前以字符串<code>@"Loading..."</code>占位，之后与<code>self.someLablel</code>的<code>text</code>属性绑定。</li>
<li>把<code>desc</code>信号所有的错误转换为字符串<code>@"Error"</code>并且在没有获取值之前以字符串<code>@"Loading..."</code>占位，之后与<code>self.originTextView</code>的<code>text</code>属性绑定。</li>
<li>把<code>renderedDesc</code>信号所有的错误转换为属性字符串<code>@"Error"</code>并且在没有获取值之前以属性字符串<code>@"Loading..."</code>占位，之后与<code>self.renderedTextView</code>的<code>text</code>属性绑定。</li>
<li>把<code>title</code>、<code>desc</code>、<code>renderedDesc</code>这三个信号的任何错误订阅，并且弹出<code>UIAlertView</code>。</li>
</ol>


<p>看到这里我相信很多熟悉RAC的同学应该是对这些代码表示认同的，它也体现了RAC的一些优势例如良好的错误处理和各种链式处理。但是很遗憾的告诉大家这段代码是有很严重的错误的。</p>

<p>如果你去尝试运行这段代码，并且打开Charles查看，你会惊奇的发现，这个网络请求发送了6次。没错，是6次请求。我们也可以想象到类似的代码在其他副作用的问题，重新刷新了6次屏幕，写入6次文件，发了6个全局通知。</p>

<p>下面来分析下，为什么是6次网络请求呢？首先根据上面的知识，我们可以推断出名为<code>fetchData</code>信号是一个冷信号。那么这个信号在订阅的时候就会执行里面的过程。那这个信号是在什么时候被订阅了呢？仔细回看了代码，我们发现并没有订阅这个信号，只是调用这个信号的<code>flattenMap</code>产生了两个新的信号。</p>

<p><strong>这里有一个很重要的概念，就是任何的信号转换即是对原有的信号进行订阅从而产生新的信号。</strong>我们可以写出flattenMap的伪代码如下：</p>

<pre><code class="objective-c">
- (instancetype)flattenMap_:(RACStream * (^)(id value))block {
{
    return [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) {
       return [self subscribeNext:^(id x) {
           RACSignal *signal = (RACSignal *)block(x);
           [signal subscribeNext:^(id x) {
               [subscriber sendNext:x];
           } error:^(NSError *error) {
               [subscriber sendError:error];
           } completed:^{
               [subscriber sendCompleted];
           }];
       } error:^(NSError *error) {
           [subscriber sendError:error];
       } completed:^{
           [subscriber sendCompleted];
       }];
    }];
}
</code></pre>

<p>除了没有高度复用和缺少一些disposable的处理以外，上述代码可以大致的给我们<code>flattenMap</code>的直观处理，我们可以看到其实是在调用这个方法的时候，生成了一个新的信号，在这个新的信号的执行过程中对<code>self</code>进行的了<strong>订阅</strong>。我们还需要注意一个细节，就是这个返回信号在未来订阅的时候，才会间接的订阅了<code>self</code>。后续的<code>startWith</code>、<code>catchTo</code>等都可以这样理解。</p>

<p>回到我们的问题，那就是说，在<code>fetchData</code>被<code>flattenMap</code>之后，它就会因为名为<code>title</code>和<code>desc</code>信号的订阅而订阅。而后续我们对<code>desc</code>也进行了<code>flattenMap</code>得到了<code>renderedDesc</code>，那也说明了未来<code>renderedDesc</code>被订阅的时候，<code>fetchData</code>也会被间接订阅。所以我们解释了在后续我们用RAC宏进行绑定的时候，引发的<strong>3次</strong><code>fetchData</code>的订阅。由于<code>fetchData</code>是冷信号，所以3次订阅意味着它的过程被执行了3次，也就是网络的3次请求。</p>

<p>另外的3次订阅来自<code>RACSignal</code>类的<code>merge</code>方法。根据上述的描述，我们也可以猜测<code>merge</code>方法也一定是创建了一个新的信号，在这个信号被订阅的时候，把它包含的所有信号订阅。所以我们又得到了额外的3次网络请求。</p>

<p>由此我们可以深刻的看到不熟悉冷热信号对业务造成的影响。我们可以想象对用户流量的影响，对服务器负载的影响，对统计的影响，如果这是一个点赞的接口，会不会造成多次点赞？后果是不堪的。而着一些都可以通过把<code>fetchData</code>转换为热信号来解决。</p>

<p>接下来也许你会问，如果我的整个计算过程中都没有副作用，是否就不会有这个问题，答案是肯定的，试想下刚才那段代码如果没有网络请求，换成一些标准化的计算会怎样。可以肯定的是我们不会出现bug，但是不要忽视的就是其中的运算我们执行了多次。刚才在介绍纯函数的时候，还有一个概念就是<a href="https://en.wikipedia.org/wiki/Referential_transparency_(computer_science)">引用透明</a>，我们可以在纯函数式语言（例如<a href="https://www.haskell.org">Haskell</a>）上进行一定的优化，<strong>也就是说纯函数的调用在相同参数下的返回值第二次不需要计算</strong>，所以在纯函数式语言里面的FRP并没有冷信号的担忧。然而Objective-C语言中并未对纯函数进行优化。所以拥有大规模运算的冷信号对性能也是有一定影响的。</p>

<p>所以如果我们想更好的掌握RAC这个框架，区分冷信号与热信号是十分重要的。</p>

<h2>正确理解冷信号与热信号</h2>

<p>FRP是一种<a href="https://en.wikipedia.org/wiki/Declarative_programming">声明式编程</a>。与传统的命令式编程的区别是声明式只是描述目标性质，让计算机明确目标，而非流程。而声明式编程不一定是FRP所独有的。例如Autolayout就是一种声明式编程的表现，通过编程声明了约束，而框架来做实际的动作。我们的主角RACSignal也是声明式的。请看下面代码：</p>

<pre><code class="objective-c">
    RACSignal *signal = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) {
        [subscriber sendNext:@1];
        [subscriber sendCompleted];
    }];

    RACSignal *mappedSignal = [signal map:^id(NSNumber *value) {
        return [NSString stringWithFormat:@"Value is %@", value];
    }];
</code></pre>

<p>上述代码的<strong>声明</strong>了一个信号<code>signal</code>，<code>signal</code>指明了发送<code>“1”</code>这个值后发送<code>结束</code>事件。另外<strong>声明</strong>了一个信号<code>mappedSignal</code>，<code>mappedSignal</code>指明<code>signal</code>的值都进行一个字符串的<code>转换</code>。如果仅仅写到这里，<code>sendNext:</code>和<code>map:</code>后面的block其实都没有被执行。</p>

<p>那究竟是何时这些block会执行呢？没错，那就是在订阅之后。订阅<code>mappedSignal</code>之后，还会连带的把<code>signal</code>订阅了。因而预先<strong>声明</strong>的部分就有了动作。</p>

<p>在搞清楚了信号的声明和信号的订阅之后，再来理解多次订阅的问题。既然创建一个信号只是声明了一段操作，那就说明这个信号本身并无状态可言。可以换个角度来理解，在C语言中，声明了一个函数，这个函数在不同的时间被调用了很多次，函数体肯定会执行相应的次数。因为一个被声明的函数并没有状态，它并不清楚自己被谁在什么时间调用。所以冷信号也是一样，这段操作会在每次订阅的时候都执行，因为冷信号没有状态，它并不清楚自己被谁在什么时候订阅了。</p>

<p>当然一旦信号中存在了<code>副作用</code>，等同与一个修改了全局变量的函数，每次执行的时候的效果就是不一样的了，所以才会出现了前面提到的几个问题。</p>

<p>打个比方，冷信号好比一个剧本，它预先把要做的事情约定好。一旦一个导演说开拍，就是订阅了这个剧本，里面说描述的动作也开始一一被执行，而另一个导演拿着这个剧本开拍，显然和这个导演没有什么关系，拍摄的时期也可以不同。但是有可能有略微的关联，那就是演员可能请的相同的（访问相同的外部变量，或者触发网络请求），那可能要穿插着拍戏。另一方面观众可能也是相同的（最终都经过转换被UI订阅），那就会出现观众看两遍相同的剧情。</p>

<p>一旦片子拍好，放到电视上热播，就变成了热信号。它是有状态的，因为所有的观众都共享了播放的时间，大家都在同一时间观看同一片段。所以，把冷信号变为热信号的本质，就是“广播”，“广播”就是我们也在前面的代码中看到了<code>publish</code>和<code>RACMulticastConnection</code>这些操作。</p>

<p>另外举个例子，就是视频直播与视频点播。点播是无状态的，你不需要关心别人看了多少，每次你点播后都是从你需要观看的时间开始播放。而直播是有状态的，你必须要在指定的开播时间观看，一旦错过，就没法看漏掉的节目了。</p>

<h2>揭示热信号的本质</h2>

<p>好的，回到代码的世界。在RAC中，究竟什么才是热信号呢？冷信号比较常见，<code>map</code>一下就会得到一个冷信号。在RAC的世界中，其实所有的热信号都是一个类的，那就是<code>RACSubject</code>。接下来我们来看看究竟它为什么这么“神奇”。</p>

<p>在RAC2.5文档的<a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/v2.5/Documentation/FrameworkOverview.md#subjects">框架概述</a>中，有这样一段描述：</p>

<blockquote><p>A subject, represented by the RACSubject class, is a signal that can be manually controlled.</p>

<p>Subjects can be thought of as the &ldquo;mutable&rdquo; variant of a signal, much like NSMutableArray is for NSArray. They are extremely useful for bridging non-RAC code into the world of signals.</p>

<p>For example, instead of handling application logic in block callbacks, the blocks can simply send events to a shared subject instead. The subject can then be returned as a RACSignal, hiding the implementation detail of the callbacks.</p>

<p>Some subjects offer additional behaviors as well. In particular, RACReplaySubject can be used to buffer events for future subscribers, like when a network request finishes before anything is ready to handle the result.</p></blockquote>

<p>在这段描述中，我们可以看出Subject这三个特点：</p>

<ol>
<li>Subject是“可变”的。</li>
<li>Subject是非RAC到RAC的一个桥梁。</li>
<li>Subject可以良好的附加行为，例如<code>RACReplaySubject</code>可以缓冲事件给未来的订阅者。</li>
</ol>


<p>从第三个特点来看，Subject具备将事件缓冲给未来订阅者的能力，那也就说明它是自身是有状态的。由此看来Subject是符合热信号的特点的。为了验证它，我们来做个简单实验：</p>

<pre><code class="objective-c">    RACSubject *subject = [RACSubject subject];
    RACSubject *replaySubject = [RACReplaySubject subject];

    [[RACScheduler mainThreadScheduler] afterDelay:0.1 schedule:^{
        // Subscriber 1
        [subject subscribeNext:^(id x) {
            NSLog(@"Subscriber 1 get a next value: %@ from subject", x);
        }];
        [replaySubject subscribeNext:^(id x) {
            NSLog(@"Subscriber 1 get a next value: %@ from replay subject", x);
        }];

        // Subscriber 2
        [subject subscribeNext:^(id x) {
            NSLog(@"Subscriber 2 get a next value: %@ from subject", x);
        }];
        [replaySubject subscribeNext:^(id x) {
            NSLog(@"Subscriber 2 get a next value: %@ from replay subject", x);
        }];
    }];

    [[RACScheduler mainThreadScheduler] afterDelay:1 schedule:^{
        [subject sendNext:@"send package 1"];
        [replaySubject sendNext:@"send package 1"];
    }];

    [[RACScheduler mainThreadScheduler] afterDelay:1.1 schedule:^{
        // Subscriber 3
        [subject subscribeNext:^(id x) {
            NSLog(@"Subscriber 3 get a next value: %@ from subject", x);
        }];
        [replaySubject subscribeNext:^(id x) {
            NSLog(@"Subscriber 3 get a next value: %@ from replay subject", x);
        }];

        // Subscriber 4
        [subject subscribeNext:^(id x) {
            NSLog(@"Subscriber 4 get a next value: %@ from subject", x);
        }];
        [replaySubject subscribeNext:^(id x) {
            NSLog(@"Subscriber 4 get a next value: %@ from replay subject", x);
        }];
    }];

    [[RACScheduler mainThreadScheduler] afterDelay:2 schedule:^{
        [subject sendNext:@"send package 2"];
        [replaySubject sendNext:@"send package 2"];
    }];
</code></pre>

<p>按照解读一下上述代码：
1. 0s时创建<code>subject</code>与<code>replaySubject</code>这两个subject。
2. 0.1s时<code>订阅者1</code>分别订阅了<code>subject</code>与<code>replaySubject</code>。
3. 0.1s时<code>订阅者2</code>也分别订阅了<code>subject</code>与<code>replaySubject</code>。
4. 1s时分别向<code>subject</code>与<code>replaySubject</code>发送了<code>"send package 1"</code>这个字符串作为<strong>值</strong>。
5. 1.1s时<code>订阅者3</code>分别订阅了<code>subject</code>与<code>replaySubject</code>。
6. 1.1s时<code>订阅者4</code>也分别订阅了<code>subject</code>与<code>replaySubject</code>。
7. 2s时再分别向<code>subject</code>与<code>replaySubject</code>发送了<code>"send package 2"</code>这个字符串作为<strong>值</strong>。</p>

<p>接下来看一下输出的结果：
<code>
2015-09-28 13:35:22.855 RACDemos[13646:1269269] Start
2015-09-28 13:35:23.856 RACDemos[13646:1269269] Subscriber 1 get a next value: send package 1 from subject
2015-09-28 13:35:23.856 RACDemos[13646:1269269] Subscriber 2 get a next value: send package 1 from subject
2015-09-28 13:35:23.857 RACDemos[13646:1269269] Subscriber 1 get a next value: send package 1 from replay subject
2015-09-28 13:35:23.857 RACDemos[13646:1269269] Subscriber 2 get a next value: send package 1 from replay subject
2015-09-28 13:35:24.059 RACDemos[13646:1269269] Subscriber 3 get a next value: send package 1 from replay subject
2015-09-28 13:35:24.059 RACDemos[13646:1269269] Subscriber 4 get a next value: send package 1 from replay subject
2015-09-28 13:35:25.039 RACDemos[13646:1269269] Subscriber 1 get a next value: send package 2 from subject
2015-09-28 13:35:25.039 RACDemos[13646:1269269] Subscriber 2 get a next value: send package 2 from subject
2015-09-28 13:35:25.039 RACDemos[13646:1269269] Subscriber 3 get a next value: send package 2 from subject
2015-09-28 13:35:25.040 RACDemos[13646:1269269] Subscriber 4 get a next value: send package 2 from subject
2015-09-28 13:35:25.040 RACDemos[13646:1269269] Subscriber 1 get a next value: send package 2 from replay subject
2015-09-28 13:35:25.040 RACDemos[13646:1269269] Subscriber 2 get a next value: send package 2 from replay subject
2015-09-28 13:35:25.040 RACDemos[13646:1269269] Subscriber 3 get a next value: send package 2 from replay subject
2015-09-28 13:35:25.040 RACDemos[13646:1269269] Subscriber 4 get a next value: send package 2 from replay subject
</code></p>

<p>结合结果可以分析出如下内容：</p>

<ol>
<li>22.855s时，测试启动，<code>subject</code>与<code>replaySubject</code>创建完毕。</li>
<li>23.856s时，距离启动大约1s后，<code>订阅者1</code>和<code>订阅者2</code><strong>同时</strong>从<code>subject</code>接收到了<code>"send package 1"</code>这个值。</li>
<li>23.857s时，也是距离启动大约1s后，<code>订阅者1</code>和<code>订阅者2</code><strong>同时</strong>从<code>replaySubject</code>接收到了<code>"send package 1"</code>这个值。</li>
<li>24.059s时，距离启动大约1.2s后，<code>订阅者3</code>和<code>订阅者4</code><strong>同时</strong>从<code>replaySubject</code>接收到了<code>"send package 1"</code>这个值。<strong>注意<code>订阅者3</code>和<code>订阅者4</code>并没有从<code>subject</code>接收<code>"send package 1"</code>这个值。</strong></li>
<li>25.039s时，距离启动大约2.1s后，<code>订阅者1</code>、<code>订阅者2</code>、<code>订阅者3</code>、<code>订阅者4</code><strong>同时</strong>从<code>subject</code>接收到了<code>"send package 2"</code>这个值。</li>
<li>25.040s时，距离启动大约2.1s后，<code>订阅者1</code>、<code>订阅者2</code>、<code>订阅者3</code>、<code>订阅者4</code><strong>同时</strong>从<code>replaySubject</code>接收到了<code>"send package 2"</code>这个值。</li>
</ol>


<p>只关注<code>subject</code>，根据时间线，我们可以得到下图：</p>

<p><img src="/images/RAC%E5%86%B7%E7%83%AD%E4%BF%A1%E5%8F%B71.png" alt="RAC冷热信号1" /></p>

<p>经过观察不难发现，4个订阅者实际上是共享<code>subject</code>的，一旦这个<code>subject</code>发送了值，当前的订阅者就会同时接收到。由于<code>订阅者3</code>与<code>订阅者4</code>的订阅者时间稍晚，所以错过了第一次值的发送。这与冷信号是截然不同的反应。冷信号的图类似下图：</p>

<p><img src="/images/RAC%E5%86%B7%E7%83%AD%E4%BF%A1%E5%8F%B72.png" alt="RAC冷热信号1" /></p>

<p>对比上面两张图，是不是可以发现，<code>subject</code>类似“直播”，错过了就不再处理。而<code>signal</code>类似“点播”，每次订阅都会从头开始。所以我们有理由锁定<code>subject</code>天然就是热信号。</p>

<p>下面再来看看<code>replaySubject</code>，根据时间线，我们能得到另一张图：</p>

<p><img src="/images/RAC%E5%86%B7%E7%83%AD%E4%BF%A1%E5%8F%B73.png" alt="RAC冷热信号1" /></p>

<p>将该图与<code>subject</code>那张图对比会发现，<code>订阅者3</code>与<code>订阅者4</code>在订阅后马上接收到了“历史值”。对于<code>订阅者3</code>和<code>订阅者4</code>来说，他们只关心“历史的值”而不关心“历史的时间线”，因为实际上<code>1</code>与<code>2</code>是间隔1s发送的，但是他们接收到的显然不是。举个生动的例子，就好像科幻电影里面主人公穿越时间线后会把所有的回忆快速闪过来到现实一样。（见《X战警：逆转未来》、《蝴蝶效应》）所以我们也有理由锁定<code>replaySubject</code>天然也是热信号。</p>

<p>看到这里，我们终于揭开了热信号的面纱，结论便是：</p>

<ol>
<li><code>RACSubject</code>及其子类是<strong>热信号</strong>。</li>
<li><code>RACSignal</code>排除<code>RACSubject</code>类以外的是<strong>冷信号</strong>。</li>
</ol>


<h2>如何将一个冷信号转化成热信号——广播</h2>

<p>冷信号与热信号的本质区别在于是否保持状态，冷信号的多次订阅是不保持状态的，而热信号的多次订阅可以保持状态。所以一种将冷信号转换为热信号的方法就是，将冷信号订阅，取得的每一个值再通过<code>RACSbuject</code>发送出去。</p>

<p>看一下下面的代码：</p>

<pre><code class="objective-c">    RACSignal *coldSignal = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) {
        NSLog(@"Cold signal be subscribed.");
        [[RACScheduler mainThreadScheduler] afterDelay:1.5 schedule:^{
            [subscriber sendNext:@"A"];
        }];

        [[RACScheduler mainThreadScheduler] afterDelay:3 schedule:^{
            [subscriber sendNext:@"B"];
        }];

        [[RACScheduler mainThreadScheduler] afterDelay:5 schedule:^{
            [subscriber sendCompleted];
        }];

        return nil;
    }];

    RACSubject *subject = [RACSubject subject];
    NSLog(@"Subject created.");

    [[RACScheduler mainThreadScheduler] afterDelay:2 schedule:^{
        [coldSignal subscribe:subject];
    }];

    [subject subscribeNext:^(id x) {
        NSLog(@"Subscribe 1 recieve value:%@.", x);
    }];

    [[RACScheduler mainThreadScheduler] afterDelay:4 schedule:^{
        [subject subscribeNext:^(id x) {
            NSLog(@"Subscribe 2 recieve value:%@.", x);
        }];
</code></pre>

<p>执行顺序是这样的：</p>

<ol>
<li>创建一个冷信号：<code>coldSignal</code>。该信号声明了“订阅后1.5秒发送‘A’，3秒发送&#8217;B&#8217;，5秒发送完成事件”。</li>
<li>创建一个RACSubject：<code>subject</code>。</li>
<li>在2秒后使用这个<code>subject</code>订阅<code>coldSignal</code>。</li>
<li>立即订阅这个<code>subject</code>。</li>
<li>4秒后订阅这个<code>subject</code>。</li>
</ol>


<p>如果所料不错的话，通过订阅这个<code>subject</code>并不会引起<code>coldSignal</code>重复执行block的内容。我们来看下结果：</p>

<pre><code>2015-09-28 19:36:45.703 RACDemos[14110:1556061] Subject created.
2015-09-28 19:36:47.705 RACDemos[14110:1556061] Cold signal be subscribed.
2015-09-28 19:36:49.331 RACDemos[14110:1556061] Subscribe 1 recieve value:A.
2015-09-28 19:36:50.999 RACDemos[14110:1556061] Subscribe 1 recieve value:B.
2015-09-28 19:36:50.999 RACDemos[14110:1556061] Subscribe 2 recieve value:B.
</code></pre>

<p>参考时间线，会得到下图：
<img src="/images/RAC%E5%86%B7%E7%83%AD%E4%BF%A1%E5%8F%B74.png" alt="RAC冷热信号4" /></p>

<p>解读一下其中的要点：
1. <code>subject</code>是从一开始就创建好的，等到2s后便开始订阅<code>coldSignal</code>。
2. <code>subscribe 1</code>是<code>subject</code>创建后就开始订阅的，但是第一个接收时间与<code>subject</code>接收<code>coldSignal</code>第一个值的时间是一样的。
3. <code>subscribe 2</code>是<code>subject</code>创建4s后开始订阅的，所以只能接收到第二个值。</p>

<p>通过观察可以确定，<code>subject</code>就是<code>coldSignal</code>转化的热信号。所以使用<code>RACSubject</code>来将冷信号转化为热信号是可行的。</p>

<p>当然，使用这种<code>RACSubject</code>来订阅冷信号得到热信号的方式还是有一些小的瑕疵的。例如<code>subject</code>的订阅者提前终止了订阅，而<code>subject</code>并不能终止对<code>coldSignal</code>的订阅。（<code>RACDisposable</code>是一个比较大的话题，我计划在其他的文章中详细阐述它，也希望感兴趣的同学自己来理解。）所以RAC库中对于冷信号转化成热信号有如下标准的包装：</p>

<pre><code class="objective-c">- (RACMulticastConnection *)publish;
- (RACMulticastConnection *)multicast:(RACSubject *)subject;
- (RACSignal *)replay;
- (RACSignal *)replayLast;
- (RACSignal *)replayLazily;
</code></pre>

<p>这5个方法中，最为重要的就是<code>- (RACMulticastConnection *)multicast:(RACSubject *)subject;</code>这个方法了，其他几个方法也是间接调用它的。我们来看看它的真相：</p>

<pre><code class="objective-c">/// implementation RACSignal (Operations)
- (RACMulticastConnection *)multicast:(RACSubject *)subject {
    [subject setNameWithFormat:@"[%@] -multicast: %@", self.name, subject.name];
    RACMulticastConnection *connection = [[RACMulticastConnection alloc] initWithSourceSignal:self subject:subject];
    return connection;
}

/// implementation RACMulticastConnection

- (id)initWithSourceSignal:(RACSignal *)source subject:(RACSubject *)subject {
    NSCParameterAssert(source != nil);
    NSCParameterAssert(subject != nil);

    self = [super init];
    if (self == nil) return nil;

    _sourceSignal = source;
    _serialDisposable = [[RACSerialDisposable alloc] init];
    _signal = subject;

    return self;
}

#pragma mark Connecting

- (RACDisposable *)connect {
    BOOL shouldConnect = OSAtomicCompareAndSwap32Barrier(0, 1, &amp;_hasConnected);

    if (shouldConnect) {
        self.serialDisposable.disposable = [self.sourceSignal subscribe:_signal];
    }

    return self.serialDisposable;
}

- (RACSignal *)autoconnect {
    __block volatile int32_t subscriberCount = 0;

    return [[RACSignal
        createSignal:^(id&lt;RACSubscriber&gt; subscriber) {
            OSAtomicIncrement32Barrier(&amp;subscriberCount);

            RACDisposable *subscriptionDisposable = [self.signal subscribe:subscriber];
            RACDisposable *connectionDisposable = [self connect];

            return [RACDisposable disposableWithBlock:^{
                [subscriptionDisposable dispose];

                if (OSAtomicDecrement32Barrier(&amp;subscriberCount) == 0) {
                    [connectionDisposable dispose];
                }
            }];
        }]
        setNameWithFormat:@"[%@] -autoconnect", self.signal.name];
}
</code></pre>

<p>代码比较短，大概来说明一下：
1. 当<code>RACSignal</code>类的实例调用<code>- (RACMulticastConnection *)multicast:(RACSubject *)subject</code>时，创建一个<code>RACMulticastConnection</code>实例，以<code>self</code>和<code>subject</code>作为构造参数。
2. <code>RACMulticastConnection</code>构造的时候，保存<code>source</code>和<code>subject</code>作为成员变量，创建一个<code>RACSerialDisposable</code>对象。
3. 当<code>RACMulticastConnection</code>类的实例调用<code>- (RACDisposable *)connect</code>这个方法的时候，判断是否是第一次，如果是的话用<code>_signal</code>这个成员变量来订阅<code>sourceSignal</code>之后返回<code>self.serialDisposable</code>；否则直接返回<code>self.serialDisposable</code>。
4. <code>RACMulticastConnection</code>的<code>signal</code>只读属性，就是热信号，订阅它就可以。它会在<code>- (RACDisposable *)connect</code>第一次调用后，根据<code>sourceSignal</code>的订阅结果来传递事件。
5. 想要确保第一次订阅就能成功订阅<code>sourceSignal</code>，可以使用<code>- (RACSignal *)autoconnect</code>这个方法，它保证了第一个订阅者触发了<code>sourceSignal</code>的订阅，也保证了当返回的信号所有订阅者都关闭连接后<code>sourceSignal</code>被正确关闭连接。</p>

<p>所以，正确的使用可以像这样：</p>

<pre><code class="objective-c">    RACSignal *coldSignal = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) {
        NSLog(@"Cold signal be subscribed.");
        [[RACScheduler mainThreadScheduler] afterDelay:1.5 schedule:^{
            [subscriber sendNext:@"A"];
        }];

        [[RACScheduler mainThreadScheduler] afterDelay:3 schedule:^{
            [subscriber sendNext:@"B"];
        }];

        [[RACScheduler mainThreadScheduler] afterDelay:5 schedule:^{
            [subscriber sendCompleted];
        }];


        return nil;
    }];

    RACSubject *subject = [RACSubject subject];
    NSLog(@"Subject created.");

    RACMulticastConnection *multicastConnection = [coldSignal multicast:subject];
    RACSignal *hotSignal = multicastConnection.signal;

    [[RACScheduler mainThreadScheduler] afterDelay:2 schedule:^{
        [multicastConnection connect];
    }];

    [hotSignal subscribeNext:^(id x) {
        NSLog(@"Subscribe 1 recieve value:%@.", x);
    }];

    [[RACScheduler mainThreadScheduler] afterDelay:4 schedule:^{
        [hotSignal subscribeNext:^(id x) {
            NSLog(@"Subscribe 2 recieve value:%@.", x);
        }];
    }];
</code></pre>

<p>或者这样：</p>

<pre><code class="objective-c">    RACSignal *coldSignal = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) {
        NSLog(@"Cold signal be subscribed.");
        [[RACScheduler mainThreadScheduler] afterDelay:1.5 schedule:^{
            [subscriber sendNext:@"A"];
        }];

        [[RACScheduler mainThreadScheduler] afterDelay:3 schedule:^{
            [subscriber sendNext:@"B"];
        }];

        [[RACScheduler mainThreadScheduler] afterDelay:5 schedule:^{
            [subscriber sendCompleted];
        }];


        return nil;
    }];

    RACSubject *subject = [RACSubject subject];
    NSLog(@"Subject created.");

    RACMulticastConnection *multicastConnection = [coldSignal multicast:subject];
    RACSignal *hotSignal = multicastConnection.autoconnect;

    [[RACScheduler mainThreadScheduler] afterDelay:2 schedule:^{
        [hotSignal subscribeNext:^(id x) {
            NSLog(@"Subscribe 1 recieve value:%@.", x);
        }];
    }];


    [[RACScheduler mainThreadScheduler] afterDelay:4 schedule:^{
        [hotSignal subscribeNext:^(id x) {
            NSLog(@"Subscribe 2 recieve value:%@.", x);
        }];
    }];
</code></pre>

<p>以上的两种写法都可以得到和之前相同的结果。</p>

<p>下面再来看看其他几个方法的实现：</p>

<pre><code class="objective-c">/// implementation RACSignal (Operations)
- (RACMulticastConnection *)publish {
    RACSubject *subject = [[RACSubject subject] setNameWithFormat:@"[%@] -publish", self.name];
    RACMulticastConnection *connection = [self multicast:subject];
    return connection;
}

- (RACSignal *)replay {
    RACReplaySubject *subject = [[RACReplaySubject subject] setNameWithFormat:@"[%@] -replay", self.name];

    RACMulticastConnection *connection = [self multicast:subject];
    [connection connect];

    return connection.signal;
}

- (RACSignal *)replayLast {
    RACReplaySubject *subject = [[RACReplaySubject replaySubjectWithCapacity:1] setNameWithFormat:@"[%@] -replayLast", self.name];

    RACMulticastConnection *connection = [self multicast:subject];
    [connection connect];

    return connection.signal;
}

- (RACSignal *)replayLazily {
    RACMulticastConnection *connection = [self multicast:[RACReplaySubject subject]];
    return [[RACSignal
        defer:^{
            [connection connect];
            return connection.signal;
        }]
        setNameWithFormat:@"[%@] -replayLazily", self.name];
}
</code></pre>

<p>这几个方法的时间都相当简单，只是为了简化代码，具体说明一下：
1. <code>- (RACMulticastConnection *)publish</code>就是帮忙创建了<code>RACSubject</code>。
2. <code>- (RACSignal *)replay</code>就是用<code>RACReplaySubject</code>来作为<code>subject</code>，并立即执行<code>connect</code>操作，返回<code>connection.signal</code>。其作用是上面提到的<code>replay</code>功能，既后来的订阅者可以收到历史值。
3. <code>- (RACSignal *)replayLast</code>就是用<code>Capacity</code>为1的<code>RACReplaySubject</code>来替换<code>- (RACSignal *)replay</code>的<code>subject。其作用是使后来订阅者只收到最后的历史值。
4.</code>- (RACSignal <em>)replayLazily<code>和</code>- (RACSignal </em>)replay<code>的区别就是</code>replayLazily<code>会在第一次订阅的时候才订阅</code>sourceSignal`。</p>

<p>现在看下之前第二章那个业务场景的例子，其实修改的方法很简单，就是在网络获取的<code>fetchData</code>这个信号后面，增加一个<code>replayLazily</code>变换，就不会出现网络请求重发6次的问题了。</p>

<p>修改后的代码如下：</p>

<pre><code class="objective-c">
    self.sessionManager = [[AFHTTPSessionManager alloc] initWithBaseURL:[NSURL URLWithString:@"http://api.xxxx.com"]];

    self.sessionManager.requestSerializer = [AFJSONRequestSerializer serializer];
    self.sessionManager.responseSerializer = [AFJSONResponseSerializer serializer];

    @weakify(self)
    RACSignal *fetchData = [[RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) {
        @strongify(self)
        NSURLSessionDataTask *task = [self.sessionManager GET:@"fetchData" parameters:@{@"someParameter": @"someValue"} success:^(NSURLSessionDataTask *task, id responseObject) {
            [subscriber sendNext:responseObject];
            [subscriber sendCompleted];
        } failure:^(NSURLSessionDataTask *task, NSError *error) {
            [subscriber sendError:error];
        }];
        return [RACDisposable disposableWithBlock:^{
            if (task.state != NSURLSessionTaskStateCompleted) {
                [task cancel];
            }
        }];
    }] replayLazily];  // modify here!!

    RACSignal *title = [fetchData flattenMap:^RACSignal *(NSDictionary *value) {
        if ([value[@"title"] isKindOfClass:[NSString class]]) {
            return [RACSignal return:value[@"title"]];
        } else {
            return [RACSignal error:[NSError errorWithDomain:@"some error" code:400 userInfo:@{@"originData": value}]];
        }
    }];

    RACSignal *desc = [fetchData flattenMap:^RACSignal *(NSDictionary *value) {
        if ([value[@"desc"] isKindOfClass:[NSString class]]) {
            return [RACSignal return:value[@"desc"]];
        } else {
            return [RACSignal error:[NSError errorWithDomain:@"some error" code:400 userInfo:@{@"originData": value}]];
        }
    }];

    RACSignal *renderedDesc = [desc flattenMap:^RACStream *(NSString *value) {
        NSError *error = nil;
        RenderManager *renderManager = [[RenderManager alloc] init];
        NSAttributedString *rendered = [renderManager renderText:value error:&amp;error];
        if (error) {
            return [RACSignal error:error];
        } else {
            return [RACSignal return:rendered];
        }
    }];

    RAC(self.someLablel, text) = [[title catchTo:[RACSignal return:@"Error"]]  startWith:@"Loading..."];
    RAC(self.originTextView, text) = [[desc catchTo:[RACSignal return:@"Error"]] startWith:@"Loading..."];
    RAC(self.renderedTextView, attributedText) = [[renderedDesc catchTo:[RACSignal return:[[NSAttributedString alloc] initWithString:@"Error"]]] startWith:[[NSAttributedString alloc] initWithString:@"Loading..."]];

    [[RACSignal merge:@[title, desc, renderedDesc]] subscribeError:^(NSError *error) {
        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:error.domain delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alertView show];
    }];
</code></pre>

<p>当然，这样修改，仍然有许多计算上的浪费，例如将<code>fetchData</code>转换为<code>title</code>的block会执行多次，将<code>fetchData</code>转换为<code>desc</code>的block也会执行多次。但是由于这些block都是无副作用的，计算量又小，可以忽略不计。</p>

<p>至此，我们终于揭开RAC中冷信号与热信号的全部面纱，也知道如何使用了。希望此文可以让大家更好的了解RAC，减少使用RAC遇到的误区。谢谢大家。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[聊一聊RAC]]></title>
    <link href="http://williamzang.com/blog/2014/08/20/talk-about-rac/"/>
    <updated>2014-08-20T11:17:32+08:00</updated>
    <id>http://williamzang.com/blog/2014/08/20/talk-about-rac</id>
    <content type="html"><![CDATA[<p>今天来聊一聊RAC，这个在Github上很火热的开源框架，相信很多关注iOS前沿开发的人都或多或少的知道。</p>

<p>关于RAC的介绍和一些概念，我这里就不再啰嗦了，大家可以看   <a href="http://limboy.me/about.html">limboy</a>的几篇关于RAC的介绍，很不错。</p>

<blockquote><p><a href="http://limboy.me/ios/2013/06/19/frp-reactivecocoa.html">ReactiveCocoa与Functional Reactive Programming</a><br/>
<a href="http://limboy.me/ios/2013/12/27/reactivecocoa-2.html">说说ReactiveCocoa 2</a><br/>
<a href="http://limboy.me/ios/2014/01/05/ios-rest-client-implementation.html">基于AFNetworking2.0和ReactiveCocoa2.1的iOS REST Client</a><br/>
<a href="http://limboy.me/tech/2014/06/06/deep-into-reactivecocoa2.html">ReactiveCocoa2实战</a></p></blockquote>

<p>此外还有Cocoachina的一系列教程<a href="http://www.cocoachina.com/cms/plus/view.php?aid=8905">Reactive Cocoa详解</a></p>

<p>写Blog，在我看来和开发一样，也要讲究重用，引用列位的信息即可，何必黏贴和表达类似的观点。这里我也仅说一下我自己的理解和看法。</p>

<p>相信很多人都尝试过RAC用到一些小的DEMO或者项目中的一个小部分然后就浅尝辄止了。为什么呢？我觉得主要在于，RAC实际推行的一种新的概念大家还没有习惯，那就是函数响应式编程FRP。<a href="https://github.com/staltz">staltz</a>在一个Gist上倒是给了一个比较全面的解释<a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754">The introduction to Reactive Programming you&rsquo;ve been missing</a>，可惜是英文的。</p>

<p>这种FRP的核心就在于数据流，FRP把整个的程序认为是数据流的转换，既不是过程、也不是对象。一个系统先产生信号，转换信号，然后业务和界面再接收和响应信号的变化。所以，这是一个新的概念。如果使用别的概念套用，自然用起来就没那么顺手了。那么我们来看看，这样做的好处是什么呢？</p>

<ul>
<li>统一的流处理模式，使得不同的组件可以很好的结合起来，例如iOS的<code>UserDefault</code>、<code>NSNotificationCenter</code>、<code>KVO</code>这些，在RAC库下面，都是相同的封装，这样就使得上层的业务逻辑实现了<strong>大同</strong>，进而一切的信号转换合并都可以有效的结合在一起。</li>
<li>处理异步，很多时候，我们对于异步再同步是比较头大的。而RAC中，一个信号的终止，是不局限在一个函数中的。这样我们可以把不同线程、不同时期的状态绑到一个信号上，使得使用者达到一种内聚。和这种内聚，在转换和迭代的过程中是很必要的。</li>
<li>统一的错误处理，从古老的C时代的<code>int DoSomeThine(int input1, int *output1)</code>这种以返回值返回错误，到后来<code>SetErrorStatus(int ErrorCode, const char *message)</code>的线程栈内全局报错机制，还有现在try-catch机制，都有一个很要命的问题，就是错误处理，或者是可以被忽略，或者是让开发变得很烦恼。Java的try-catch机制，相信Java的开发者们一定深有感触。而RAC把错误变得简单了，它对于错误的处理，会随着变化一起传递到顶层，既不会忘记，也不用在中间环节中手动传递来传递去。</li>
<li>逻辑的拆分，在FRP中，逻辑变得相对独立，通常是一个模块，根据一定的变化产生一个信号，亦或是一个模块，根据一个传入的信号，产生一定的转换。这就使得，我们可以只返回我们的直接结果，后期的加工和变更是分离的。对于上层模块，也只关注信号的类型，不关注处于那个线程还是何种手法。</li>
</ul>


<p>总而言之，RAC给与我们以数据的变化作为出发点，界面与之响应的一套框架。详细的一些技巧，我会在后续的blog中为大家慢慢介绍。</p>
]]></content>
  </entry>
  
</feed>
